{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n/*\n * BCS implementation {@see https://github.com/diem/bcs } for JavaScript.\n * Intended to be used for Move applications; supports both NodeJS and browser.\n *\n * For more details and examples {@see README.md }.\n *\n * @module bcs\n * @property {BcsReader}\n */\n\nimport { fromB58, toB58 } from './b58.js';\nimport { fromB64, toB64 } from './b64.js';\nimport type { BcsTypeOptions } from './bcs-type.js';\nimport { BcsType, isSerializedBcs, SerializedBcs } from './bcs-type.js';\nimport { bcs } from './bcs.js';\nimport { fromHEX, toHEX } from './hex.js';\nimport { BcsReader } from './reader.js';\nimport type {\n    EnumInputShape,\n    EnumOutputShape,\n    EnumOutputShapeWithKeys,\n    InferBcsInput,\n    InferBcsType,\n} from './types.js';\nimport { decodeStr, encodeStr, splitGenericParameters } from './utils.js';\nimport type { BcsWriterOptions } from './writer.js';\nimport { BcsWriter } from './writer.js';\n\n// Re-export all encoding dependencies.\nexport {\n    bcs,\n    BcsType,\n    type BcsTypeOptions,\n    SerializedBcs,\n    isSerializedBcs,\n    toB58,\n    fromB58,\n    toB64,\n    fromB64,\n    fromHEX,\n    toHEX,\n    encodeStr,\n    decodeStr,\n    splitGenericParameters,\n    BcsReader,\n    BcsWriter,\n    type BcsWriterOptions,\n    type InferBcsInput,\n    type InferBcsType,\n    type EnumOutputShape,\n    type EnumInputShape,\n    type EnumOutputShapeWithKeys,\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA,iBAA+B;AAC/B,iBAA+B;AAE/B,sBAAwD;AACxD,iBAAoB;AACpB,iBAA+B;AAC/B,oBAA0B;AAQ1B,mBAA6D;AAE7D,oBAA0B;",
  "names": []
}
