{
  "version": 3,
  "sources": ["../../src/utils.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB58, toB58 } from './b58.js';\nimport { fromB64, toB64 } from './b64.js';\nimport { fromHEX, toHEX } from './hex.js';\nimport type { Encoding } from './types.js';\n\n/**\n * Encode data with either `hex` or `base64`.\n *\n * @param {Uint8Array} data Data to encode.\n * @param {String} encoding Encoding to use: base64 or hex\n * @return {String} Encoded value.\n */\nexport function encodeStr(data: Uint8Array, encoding: Encoding): string {\n    switch (encoding) {\n        case 'base58':\n            return toB58(data);\n        case 'base64':\n            return toB64(data);\n        case 'hex':\n            return toHEX(data);\n        default:\n            throw new Error('Unsupported encoding, supported values are: base64, hex');\n    }\n}\n\n/**\n * Decode either `base64` or `hex` data.\n *\n * @param {String} data Data to encode.\n * @param {String} encoding Encoding to use: base64 or hex\n * @return {Uint8Array} Encoded value.\n */\nexport function decodeStr(data: string, encoding: Encoding): Uint8Array {\n    switch (encoding) {\n        case 'base58':\n            return fromB58(data);\n        case 'base64':\n            return fromB64(data);\n        case 'hex':\n            return fromHEX(data);\n        default:\n            throw new Error('Unsupported encoding, supported values are: base64, hex');\n    }\n}\n\nexport function splitGenericParameters(\n    str: string,\n    genericSeparators: [string, string] = ['<', '>'],\n) {\n    const [left, right] = genericSeparators;\n    const tok = [];\n    let word = '';\n    let nestedAngleBrackets = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const char = str[i];\n        if (char === left) {\n            nestedAngleBrackets++;\n        }\n        if (char === right) {\n            nestedAngleBrackets--;\n        }\n        if (nestedAngleBrackets === 0 && char === ',') {\n            tok.push(word.trim());\n            word = '';\n            continue;\n        }\n        word += char;\n    }\n\n    tok.push(word.trim());\n\n    return tok;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,iBAA+B;AAC/B,iBAA+B;AAC/B,iBAA+B;AAUxB,SAAS,UAAU,MAAkB,UAA4B;AACpE,UAAQ,UAAU;AAAA,IACd,KAAK;AACD,iBAAO,kBAAM,IAAI;AAAA,IACrB,KAAK;AACD,iBAAO,kBAAM,IAAI;AAAA,IACrB,KAAK;AACD,iBAAO,kBAAM,IAAI;AAAA,IACrB;AACI,YAAM,IAAI,MAAM,yDAAyD;AAAA,EACjF;AACJ;AASO,SAAS,UAAU,MAAc,UAAgC;AACpE,UAAQ,UAAU;AAAA,IACd,KAAK;AACD,iBAAO,oBAAQ,IAAI;AAAA,IACvB,KAAK;AACD,iBAAO,oBAAQ,IAAI;AAAA,IACvB,KAAK;AACD,iBAAO,oBAAQ,IAAI;AAAA,IACvB;AACI,YAAM,IAAI,MAAM,yDAAyD;AAAA,EACjF;AACJ;AAEO,SAAS,uBACZ,KACA,oBAAsC,CAAC,KAAK,GAAG,GACjD;AACE,QAAM,CAAC,MAAM,KAAK,IAAI;AACtB,QAAM,MAAM,CAAC;AACb,MAAI,OAAO;AACX,MAAI,sBAAsB;AAE1B,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,UAAM,OAAO,IAAI,CAAC;AAClB,QAAI,SAAS,MAAM;AACf;AAAA,IACJ;AACA,QAAI,SAAS,OAAO;AAChB;AAAA,IACJ;AACA,QAAI,wBAAwB,KAAK,SAAS,KAAK;AAC3C,UAAI,KAAK,KAAK,KAAK,CAAC;AACpB,aAAO;AACP;AAAA,IACJ;AACA,YAAQ;AAAA,EACZ;AAEA,MAAI,KAAK,KAAK,KAAK,CAAC;AAEpB,SAAO;AACX;",
  "names": []
}
