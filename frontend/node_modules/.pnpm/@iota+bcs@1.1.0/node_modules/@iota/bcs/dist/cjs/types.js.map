{
  "version": 3,
  "sources": ["../../src/types.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from './bcs-type.js';\n\n/**\n * Supported encodings.\n * Used in `Reader.toString()` as well as in `decodeStr` and `encodeStr` functions.\n */\nexport type Encoding = 'base58' | 'base64' | 'hex';\n\nexport type InferBcsType<T extends BcsType<any>> = T extends BcsType<infer U, any> ? U : never;\nexport type InferBcsInput<T extends BcsType<any, any>> =\n    T extends BcsType<any, infer U> ? U : never;\n\ntype Merge<T> = T extends object ? { [K in keyof T]: T[K] } : never;\nexport type EnumOutputShape<\n    T extends Record<string, unknown>,\n    Keys extends string = Extract<keyof T, string>,\n    Values = T[keyof T] extends infer Type ? (Type extends BcsType<infer U> ? U : never) : never,\n> = 0 extends Values\n    ? EnumOutputShapeWithKeys<T, never>\n    : 0n extends Values\n      ? EnumOutputShapeWithKeys<T, never>\n      : '' extends Values\n        ? EnumOutputShapeWithKeys<T, never>\n        : false extends Values\n          ? EnumOutputShapeWithKeys<T, never>\n          : EnumOutputShapeWithKeys<T, Keys>;\n\nexport type EnumOutputShapeWithKeys<T extends Record<string, unknown>, Keys extends string> = {\n    [K in keyof T]: Exclude<Keys, K> extends infer Empty extends string\n        ? Merge<\n              { [K2 in K]: T[K] } & { [K in Empty]?: never } & {\n                  $kind: K;\n              }\n          >\n        : never;\n}[keyof T];\n\nexport type EnumInputShape<T extends Record<string, unknown>> = {\n    [K in keyof T]: { [K2 in K]: T[K] };\n}[keyof T];\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
