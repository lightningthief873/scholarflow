// src/hooks/useIotaClientInfiniteQuery.ts
import { useInfiniteQuery } from "@tanstack/react-query";

// src/hooks/useIotaClient.ts
import { useContext } from "react";

// src/components/IotaClientProvider.tsx
import { getNetwork, isIotaClient, Network, IotaClient } from "@iota/iota-sdk/client";
import { createContext, useMemo, useState } from "react";
import { jsx } from "react/jsx-runtime";
var IotaClientContext = createContext(null);
var DEFAULT_NETWORKS = {
  localnet: { url: getNetwork(Network.Localnet)?.url }
};

// src/hooks/useIotaClient.ts
function useIotaClientContext() {
  const iotaClient = useContext(IotaClientContext);
  if (!iotaClient) {
    throw new Error(
      "Could not find IotaClientContext. Ensure that you have set up the IotaClientProvider"
    );
  }
  return iotaClient;
}

// src/hooks/useIotaClientInfiniteQuery.ts
function useIotaClientInfiniteQuery(method, params, {
  queryKey = [],
  enabled = !!params,
  ...options
} = {}) {
  const iotaContext = useIotaClientContext();
  return useInfiniteQuery({
    ...options,
    initialPageParam: null,
    queryKey: [iotaContext.network, method, params, ...queryKey],
    enabled,
    queryFn: ({ pageParam }) => iotaContext.client[method]({
      ...params ?? {},
      cursor: pageParam
    }),
    getNextPageParam: (lastPage) => lastPage.hasNextPage ? lastPage.nextCursor ?? null : null
  });
}
export {
  useIotaClientInfiniteQuery
};
//# sourceMappingURL=useIotaClientInfiniteQuery.js.map
