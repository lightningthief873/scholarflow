{
  "version": 3,
  "sources": ["../../../src/hooks/useIotaClientQueries.ts", "../../../src/hooks/useIotaClient.ts", "../../../src/components/IotaClientProvider.tsx"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { UseQueryResult } from '@tanstack/react-query';\nimport { useQueries } from '@tanstack/react-query';\n\nimport { useIotaClientContext } from './useIotaClient.js';\nimport type { IotaRpcMethods, UseIotaClientQueryOptions } from './useIotaClientQuery.js';\n\ntype IotaClientQueryOptions = IotaRpcMethods[keyof IotaRpcMethods] extends infer Method\n    ? Method extends {\n          name: infer M extends keyof IotaRpcMethods;\n          params?: infer P;\n      }\n        ? undefined extends P\n            ? {\n                  method: M;\n                  params?: P;\n                  options?: UseIotaClientQueryOptions<M, unknown>;\n              }\n            : {\n                  method: M;\n                  params: P;\n                  options?: UseIotaClientQueryOptions<M, unknown>;\n              }\n        : never\n    : never;\n\nexport type UseIotaClientQueriesResults<Args extends readonly IotaClientQueryOptions[]> = {\n    -readonly [K in keyof Args]: Args[K] extends {\n        method: infer M extends keyof IotaRpcMethods;\n        readonly options?:\n            | {\n                  select?: (...args: any[]) => infer R;\n              }\n            | object;\n    }\n        ? UseQueryResult<unknown extends R ? IotaRpcMethods[M]['result'] : R>\n        : never;\n};\n\nexport function useIotaClientQueries<\n    const Queries extends readonly IotaClientQueryOptions[],\n    Results = UseIotaClientQueriesResults<Queries>,\n>({\n    queries,\n    combine,\n}: {\n    queries: Queries;\n    combine?: (results: UseIotaClientQueriesResults<Queries>) => Results;\n}): Results {\n    const iotaContext = useIotaClientContext();\n\n    return useQueries({\n        combine: combine as never,\n        queries: queries.map((query) => {\n            const { method, params, options: { queryKey = [], ...restOptions } = {} } = query;\n\n            return {\n                ...restOptions,\n                queryKey: [iotaContext.network, method, params, ...queryKey],\n                queryFn: async () => {\n                    return await iotaContext.client[method](params as never);\n                },\n            };\n        }) as [],\n    });\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { IotaClient } from '@iota/iota-sdk/client';\nimport { useContext } from 'react';\n\nimport { IotaClientContext } from '../components/IotaClientProvider.js';\n\nexport function useIotaClientContext() {\n    const iotaClient = useContext(IotaClientContext);\n\n    if (!iotaClient) {\n        throw new Error(\n            'Could not find IotaClientContext. Ensure that you have set up the IotaClientProvider',\n        );\n    }\n\n    return iotaClient;\n}\n\nexport function useIotaClient(): IotaClient {\n    return useIotaClientContext().client;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getNetwork, isIotaClient, Network, IotaClient } from '@iota/iota-sdk/client';\nimport type { IotaClientOptions } from '@iota/iota-sdk/client';\nimport { createContext, useMemo, useState } from 'react';\n\nimport type { NetworkConfig } from '../hooks/networkConfig.js';\n\ntype NetworkConfigs<T extends NetworkConfig | IotaClient = NetworkConfig | IotaClient> = Record<\n    string,\n    T\n>;\n\nexport interface IotaClientProviderContext {\n    client: IotaClient;\n    networks: NetworkConfigs;\n    network: string;\n    config: NetworkConfig | null;\n    selectNetwork: (network: string) => void;\n}\n\nexport const IotaClientContext = createContext<IotaClientProviderContext | null>(null);\n\nexport type IotaClientProviderProps<T extends NetworkConfigs> = {\n    createClient?: (name: keyof T, config: T[keyof T]) => IotaClient;\n    children: React.ReactNode;\n    networks?: T;\n    onNetworkChange?: (network: keyof T & string) => void;\n} & (\n    | {\n          defaultNetwork?: keyof T & string;\n          network?: never;\n      }\n    | {\n          defaultNetwork?: never;\n          network?: keyof T & string;\n      }\n);\n\nconst DEFAULT_NETWORKS = {\n    localnet: { url: getNetwork(Network.Localnet)?.url },\n};\n\nconst DEFAULT_CREATE_CLIENT = function createClient(\n    _name: string,\n    config: NetworkConfig | IotaClient,\n) {\n    if (isIotaClient(config)) {\n        return config;\n    }\n\n    return new IotaClient(config);\n};\n\nexport function IotaClientProvider<T extends NetworkConfigs>(props: IotaClientProviderProps<T>) {\n    const { onNetworkChange, network, children } = props;\n    const networks = (props.networks ?? DEFAULT_NETWORKS) as T;\n    const createClient =\n        (props.createClient as typeof DEFAULT_CREATE_CLIENT) ?? DEFAULT_CREATE_CLIENT;\n\n    const [selectedNetwork, setSelectedNetwork] = useState<keyof T & string>(\n        props.network ?? props.defaultNetwork ?? (Object.keys(networks)[0] as keyof T & string),\n    );\n\n    const currentNetwork = props.network ?? selectedNetwork;\n\n    const client = useMemo(() => {\n        return createClient(currentNetwork, networks[currentNetwork]);\n    }, [createClient, currentNetwork, networks]);\n\n    const ctx = useMemo((): IotaClientProviderContext => {\n        return {\n            client,\n            networks,\n            network: currentNetwork,\n            config:\n                networks[currentNetwork] instanceof IotaClient\n                    ? null\n                    : (networks[currentNetwork] as IotaClientOptions),\n            selectNetwork: (newNetwork) => {\n                if (currentNetwork === newNetwork) {\n                    return;\n                }\n\n                if (!network && newNetwork !== selectedNetwork) {\n                    setSelectedNetwork(newNetwork);\n                }\n\n                onNetworkChange?.(newNetwork);\n            },\n        };\n    }, [client, networks, selectedNetwork, currentNetwork, network, onNetworkChange]);\n\n    return <IotaClientContext.Provider value={ctx}>{children}</IotaClientContext.Provider>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,yBAA2B;;;ACA3B,IAAAA,gBAA2B;;;ACD3B,oBAA8D;AAE9D,mBAAiD;AAyFtC;AAxEJ,IAAM,wBAAoB,4BAAgD,IAAI;AAkBrF,IAAM,mBAAmB;AAAA,EACrB,UAAU,EAAE,SAAK,0BAAW,sBAAQ,QAAQ,GAAG,IAAI;AACvD;;;ADlCO,SAAS,uBAAuB;AACnC,QAAM,iBAAa,0BAAW,iBAAiB;AAE/C,MAAI,CAAC,YAAY;AACb,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO;AACX;;;ADuBO,SAAS,qBAGd;AAAA,EACE;AAAA,EACA;AACJ,GAGY;AACR,QAAM,cAAc,qBAAqB;AAEzC,aAAO,+BAAW;AAAA,IACd;AAAA,IACA,SAAS,QAAQ,IAAI,CAAC,UAAU;AAC5B,YAAM,EAAE,QAAQ,QAAQ,SAAS,EAAE,WAAW,CAAC,GAAG,GAAG,YAAY,IAAI,CAAC,EAAE,IAAI;AAE5E,aAAO;AAAA,QACH,GAAG;AAAA,QACH,UAAU,CAAC,YAAY,SAAS,QAAQ,QAAQ,GAAG,QAAQ;AAAA,QAC3D,SAAS,YAAY;AACjB,iBAAO,MAAM,YAAY,OAAO,MAAM,EAAE,MAAe;AAAA,QAC3D;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL,CAAC;AACL;",
  "names": ["import_react"]
}
