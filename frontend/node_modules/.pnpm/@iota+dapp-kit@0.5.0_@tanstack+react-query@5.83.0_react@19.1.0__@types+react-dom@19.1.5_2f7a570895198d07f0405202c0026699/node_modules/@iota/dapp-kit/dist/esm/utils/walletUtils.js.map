{
  "version": 3,
  "sources": ["../../../src/utils/walletUtils.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type {\n    MinimallyRequiredFeatures,\n    Wallet,\n    WalletWithFeatures,\n    WalletWithRequiredFeatures,\n} from '@iota/wallet-standard';\nimport { getWallets, isWalletWithRequiredFeatureSet } from '@iota/wallet-standard';\n\nexport function getRegisteredWallets<AdditionalFeatures extends Wallet['features']>(\n    preferredWallets: string[],\n    walletFilter?: (wallet: WalletWithRequiredFeatures) => boolean,\n) {\n    const walletsApi = getWallets();\n    const wallets = walletsApi.get();\n\n    const iotaWallets = wallets.filter(\n        (wallet): wallet is WalletWithFeatures<MinimallyRequiredFeatures & AdditionalFeatures> =>\n            isWalletWithRequiredFeatureSet(wallet) && (!walletFilter || walletFilter(wallet)),\n    );\n\n    return [\n        // Preferred wallets, in order:\n        ...(preferredWallets\n            .map((name) => iotaWallets.find((wallet) => wallet.name === name))\n            .filter(Boolean) as WalletWithFeatures<\n            MinimallyRequiredFeatures & AdditionalFeatures\n        >[]),\n\n        // Wallets in default order:\n        ...iotaWallets.filter((wallet) => !preferredWallets.includes(wallet.name)),\n    ];\n}\n\nexport function getWalletUniqueIdentifier(wallet?: Wallet) {\n    return wallet?.id ?? wallet?.name;\n}\n"],
  "mappings": ";AAUA,SAAS,YAAY,sCAAsC;AAEpD,SAAS,qBACZ,kBACA,cACF;AACE,QAAM,aAAa,WAAW;AAC9B,QAAM,UAAU,WAAW,IAAI;AAE/B,QAAM,cAAc,QAAQ;AAAA,IACxB,CAAC,WACG,+BAA+B,MAAM,MAAM,CAAC,gBAAgB,aAAa,MAAM;AAAA,EACvF;AAEA,SAAO;AAAA;AAAA,IAEH,GAAI,iBACC,IAAI,CAAC,SAAS,YAAY,KAAK,CAAC,WAAW,OAAO,SAAS,IAAI,CAAC,EAChE,OAAO,OAAO;AAAA;AAAA,IAKnB,GAAG,YAAY,OAAO,CAAC,WAAW,CAAC,iBAAiB,SAAS,OAAO,IAAI,CAAC;AAAA,EAC7E;AACJ;AAEO,SAAS,0BAA0B,QAAiB;AACvD,SAAO,QAAQ,MAAM,QAAQ;AACjC;",
  "names": []
}
