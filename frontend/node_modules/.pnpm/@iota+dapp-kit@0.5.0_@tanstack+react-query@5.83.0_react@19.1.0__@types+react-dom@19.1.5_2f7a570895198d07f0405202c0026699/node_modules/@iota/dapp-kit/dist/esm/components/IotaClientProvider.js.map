{
  "version": 3,
  "sources": ["../../../src/components/IotaClientProvider.tsx"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getNetwork, isIotaClient, Network, IotaClient } from '@iota/iota-sdk/client';\nimport type { IotaClientOptions } from '@iota/iota-sdk/client';\nimport { createContext, useMemo, useState } from 'react';\n\nimport type { NetworkConfig } from '../hooks/networkConfig.js';\n\ntype NetworkConfigs<T extends NetworkConfig | IotaClient = NetworkConfig | IotaClient> = Record<\n    string,\n    T\n>;\n\nexport interface IotaClientProviderContext {\n    client: IotaClient;\n    networks: NetworkConfigs;\n    network: string;\n    config: NetworkConfig | null;\n    selectNetwork: (network: string) => void;\n}\n\nexport const IotaClientContext = createContext<IotaClientProviderContext | null>(null);\n\nexport type IotaClientProviderProps<T extends NetworkConfigs> = {\n    createClient?: (name: keyof T, config: T[keyof T]) => IotaClient;\n    children: React.ReactNode;\n    networks?: T;\n    onNetworkChange?: (network: keyof T & string) => void;\n} & (\n    | {\n          defaultNetwork?: keyof T & string;\n          network?: never;\n      }\n    | {\n          defaultNetwork?: never;\n          network?: keyof T & string;\n      }\n);\n\nconst DEFAULT_NETWORKS = {\n    localnet: { url: getNetwork(Network.Localnet)?.url },\n};\n\nconst DEFAULT_CREATE_CLIENT = function createClient(\n    _name: string,\n    config: NetworkConfig | IotaClient,\n) {\n    if (isIotaClient(config)) {\n        return config;\n    }\n\n    return new IotaClient(config);\n};\n\nexport function IotaClientProvider<T extends NetworkConfigs>(props: IotaClientProviderProps<T>) {\n    const { onNetworkChange, network, children } = props;\n    const networks = (props.networks ?? DEFAULT_NETWORKS) as T;\n    const createClient =\n        (props.createClient as typeof DEFAULT_CREATE_CLIENT) ?? DEFAULT_CREATE_CLIENT;\n\n    const [selectedNetwork, setSelectedNetwork] = useState<keyof T & string>(\n        props.network ?? props.defaultNetwork ?? (Object.keys(networks)[0] as keyof T & string),\n    );\n\n    const currentNetwork = props.network ?? selectedNetwork;\n\n    const client = useMemo(() => {\n        return createClient(currentNetwork, networks[currentNetwork]);\n    }, [createClient, currentNetwork, networks]);\n\n    const ctx = useMemo((): IotaClientProviderContext => {\n        return {\n            client,\n            networks,\n            network: currentNetwork,\n            config:\n                networks[currentNetwork] instanceof IotaClient\n                    ? null\n                    : (networks[currentNetwork] as IotaClientOptions),\n            selectNetwork: (newNetwork) => {\n                if (currentNetwork === newNetwork) {\n                    return;\n                }\n\n                if (!network && newNetwork !== selectedNetwork) {\n                    setSelectedNetwork(newNetwork);\n                }\n\n                onNetworkChange?.(newNetwork);\n            },\n        };\n    }, [client, networks, selectedNetwork, currentNetwork, network, onNetworkChange]);\n\n    return <IotaClientContext.Provider value={ctx}>{children}</IotaClientContext.Provider>;\n}\n"],
  "mappings": ";AAIA,SAAS,YAAY,cAAc,SAAS,kBAAkB;AAE9D,SAAS,eAAe,SAAS,gBAAgB;AAyFtC;AAxEJ,IAAM,oBAAoB,cAAgD,IAAI;AAkBrF,IAAM,mBAAmB;AAAA,EACrB,UAAU,EAAE,KAAK,WAAW,QAAQ,QAAQ,GAAG,IAAI;AACvD;AAEA,IAAM,wBAAwB,SAAS,aACnC,OACA,QACF;AACE,MAAI,aAAa,MAAM,GAAG;AACtB,WAAO;AAAA,EACX;AAEA,SAAO,IAAI,WAAW,MAAM;AAChC;AAEO,SAAS,mBAA6C,OAAmC;AAC5F,QAAM,EAAE,iBAAiB,SAAS,SAAS,IAAI;AAC/C,QAAM,WAAY,MAAM,YAAY;AACpC,QAAMA,gBACD,MAAM,gBAAiD;AAE5D,QAAM,CAAC,iBAAiB,kBAAkB,IAAI;AAAA,IAC1C,MAAM,WAAW,MAAM,kBAAmB,OAAO,KAAK,QAAQ,EAAE,CAAC;AAAA,EACrE;AAEA,QAAM,iBAAiB,MAAM,WAAW;AAExC,QAAM,SAAS,QAAQ,MAAM;AACzB,WAAOA,cAAa,gBAAgB,SAAS,cAAc,CAAC;AAAA,EAChE,GAAG,CAACA,eAAc,gBAAgB,QAAQ,CAAC;AAE3C,QAAM,MAAM,QAAQ,MAAiC;AACjD,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA,SAAS;AAAA,MACT,QACI,SAAS,cAAc,aAAa,aAC9B,OACC,SAAS,cAAc;AAAA,MAClC,eAAe,CAAC,eAAe;AAC3B,YAAI,mBAAmB,YAAY;AAC/B;AAAA,QACJ;AAEA,YAAI,CAAC,WAAW,eAAe,iBAAiB;AAC5C,6BAAmB,UAAU;AAAA,QACjC;AAEA,0BAAkB,UAAU;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ,GAAG,CAAC,QAAQ,UAAU,iBAAiB,gBAAgB,SAAS,eAAe,CAAC;AAEhF,SAAO,oBAAC,kBAAkB,UAAlB,EAA2B,OAAO,KAAM,UAAS;AAC7D;",
  "names": ["createClient"]
}
