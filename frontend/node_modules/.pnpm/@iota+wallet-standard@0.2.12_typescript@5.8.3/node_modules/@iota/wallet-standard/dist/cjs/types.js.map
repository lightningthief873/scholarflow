{
  "version": 3,
  "sources": ["../../src/types.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n/** Contains data related to the gas payment for a Transaction */\nexport interface GasData {\n    /** The budget set for this transaction */\n    budget: string | number | null;\n    /** The gas price used for this transaction */\n    price: string | number | null;\n    /** The owner of the gas coins used to fund the transactions, this is either the sender or the gas sponsor */\n    owner: string | null;\n    /** The list of IOTA coins to fund the transaction */\n    payment: { objectId: string; version: string; digest: string }[] | null;\n}\n\n/**\n * Represent the serialized state of a partially built Transaction\n * This format is designed to support transactions that have not been fully build\n * allowing most properties to be omitted or set to null.  It also supports\n * unresolved object references, unresolved pure values, and Transaction Intents.\n */\nexport interface SerializedTransactionDataV2 {\n    version: 2;\n    /** The sender of the transaction */\n    sender: string | null | undefined;\n    /** The expiration of the transaction */\n    expiration: { Epoch: number } | { None: true } | null | undefined;\n    /** The gas data */\n    gasData: GasData;\n    /** The inputs to the transaction */\n    inputs: CallArg[];\n    /** The commands to execute */\n    commands: Command[];\n    /** Extra metadata for implementation specific use-cases */\n    extensions?: { [key: string]: unknown };\n}\n\n/**\n * Represents an input to a Transaction, either as a fully resolved Object or Pure input\n * or as an unresolved partial reference which needs to be resolved before the transaction\n * can be serialized to bcs and executed.\n */\nexport type CallArg =\n    | {\n          Object: ObjectArg;\n      }\n    | {\n          Pure: PureArg;\n      }\n    | {\n          UnresolvedPure: UnresolvedPureArg;\n      }\n    | {\n          UnresolvedObject: UnresolvedObjectArg;\n      };\n\nexport type ObjectArg =\n    | {\n          ImmOrOwnedObject: {\n              objectId: string;\n              version: string | number;\n              digest: string;\n          };\n      }\n    | {\n          SharedObject: {\n              objectId: string;\n              initialSharedVersion: string;\n              mutable: boolean;\n          };\n      }\n    | {\n          Receiving: {\n              objectId: string;\n              version: string | number;\n              digest: string;\n          };\n      };\n\nexport interface PureArg {\n    bytes: string;\n}\n\n/**\n * Represents an un-serialized pure value.\n * The correct bcs schema will need to be determined before this value can be serialized to bcs */\nexport interface UnresolvedPureArg {\n    value: unknown;\n}\n\n/**\n * Represents an unresolved object reference.  This allows objects to be referenced by only their ID.\n * version and digest details may also be added to unresolved object references.\n * To fully resolve a reference, the correct ObjectArg type needs to be determined based on the type of object,\n * and how it used in the transaction (eg, is it used mutably if it's shared, and is it a receiving object if it's not shared)\n */\nexport interface UnresolvedObjectArg {\n    objectId: string;\n    version?: string | null | undefined;\n    digest?: string | null | undefined;\n    initialSharedVersion?: string | null | undefined;\n}\n\nexport type Argument =\n    | {\n          GasCoin: true;\n      }\n    | {\n          Input: number;\n      }\n    | {\n          Result: number;\n      }\n    | {\n          NestedResult: [number, number];\n      };\n\nexport type Command =\n    | {\n          MoveCall: {\n              package: string;\n              module: string;\n              function: string;\n              typeArguments: string[];\n              arguments: Argument[];\n          };\n      }\n    | {\n          TransferObjects: {\n              objects: Argument[];\n              address: Argument;\n          };\n      }\n    | {\n          SplitCoins: {\n              coin: Argument;\n              amounts: Argument[];\n          };\n      }\n    | {\n          MergeCoins: {\n              destination: Argument;\n              sources: Argument[];\n          };\n      }\n    | {\n          Publish: {\n              modules: string[];\n              dependencies: string[];\n          };\n      }\n    | {\n          MakeMoveVec: {\n              type: string | null;\n              elements: Argument[];\n          };\n      }\n    | {\n          Upgrade: {\n              modules: string[];\n              dependencies: string[];\n              package: string;\n              ticket: Argument;\n          };\n      }\n    | {\n          $Intent: {\n              name: string;\n              inputs: { [key: string]: Argument | Argument[] };\n              data: { [key: string]: unknown };\n          };\n      };\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
