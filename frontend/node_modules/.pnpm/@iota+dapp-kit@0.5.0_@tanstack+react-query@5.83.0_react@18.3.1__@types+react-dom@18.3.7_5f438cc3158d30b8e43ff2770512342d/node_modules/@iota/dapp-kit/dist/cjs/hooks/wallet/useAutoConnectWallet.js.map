{
  "version": 3,
  "sources": ["../../../../src/hooks/wallet/useAutoConnectWallet.ts", "../../../../src/utils/walletUtils.ts", "../../../../src/hooks/wallet/useConnectWallet.ts", "../../../../src/constants/walletMutationKeys.ts", "../../../../src/hooks/wallet/useWalletStore.ts", "../../../../src/contexts/walletContext.ts", "../../../../src/hooks/wallet/useCurrentWallet.ts", "../../../../src/hooks/wallet/useWallets.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useQuery } from '@tanstack/react-query';\nimport { useLayoutEffect, useState } from 'react';\n\nimport { getWalletUniqueIdentifier } from '../../utils/walletUtils.js';\nimport { useConnectWallet } from './useConnectWallet.js';\nimport { useCurrentWallet } from './useCurrentWallet.js';\nimport { useWallets } from './useWallets.js';\nimport { useWalletStore } from './useWalletStore.js';\n\nexport function useAutoConnectWallet(): 'disabled' | 'idle' | 'attempted' {\n    const { mutateAsync: connectWallet } = useConnectWallet();\n    const autoConnectEnabled = useWalletStore((state) => state.autoConnectEnabled);\n    const lastConnectedWalletName = useWalletStore((state) => state.lastConnectedWalletName);\n    const lastConnectedAccountAddress = useWalletStore(\n        (state) => state.lastConnectedAccountAddress,\n    );\n    const wallets = useWallets();\n    const { isConnected } = useCurrentWallet();\n\n    const [clientOnly, setClientOnly] = useState(false);\n    useLayoutEffect(() => {\n        setClientOnly(true);\n    }, []);\n\n    const { data, isError } = useQuery({\n        queryKey: [\n            '@iota/dapp-kit',\n            'autoconnect',\n            {\n                isConnected,\n                autoConnectEnabled,\n                lastConnectedWalletName,\n                lastConnectedAccountAddress,\n                walletCount: wallets.length,\n            },\n        ],\n        queryFn: async () => {\n            if (!autoConnectEnabled) {\n                return 'disabled';\n            }\n\n            if (!lastConnectedWalletName || !lastConnectedAccountAddress || isConnected) {\n                return 'attempted';\n            }\n\n            const wallet = wallets.find(\n                (wallet) => getWalletUniqueIdentifier(wallet) === lastConnectedWalletName,\n            );\n            if (wallet) {\n                await connectWallet({\n                    wallet,\n                    accountAddress: lastConnectedAccountAddress,\n                    silent: true,\n                });\n            }\n\n            return 'attempted';\n        },\n        enabled: autoConnectEnabled,\n        persister: undefined,\n        gcTime: 0,\n        staleTime: 0,\n        networkMode: 'always',\n        retry: false,\n        retryOnMount: false,\n        refetchInterval: false,\n        refetchIntervalInBackground: false,\n        refetchOnMount: false,\n        refetchOnReconnect: false,\n        refetchOnWindowFocus: false,\n    });\n\n    if (!autoConnectEnabled) {\n        return 'disabled';\n    }\n\n    // We always initialize with \"idle\" so that in SSR environments, we guarantee that the initial render states always agree:\n    if (!clientOnly) {\n        return 'idle';\n    }\n\n    if (isConnected) {\n        return 'attempted';\n    }\n\n    if (!lastConnectedWalletName) {\n        return 'attempted';\n    }\n\n    return isError ? 'attempted' : (data ?? 'idle');\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type {\n    MinimallyRequiredFeatures,\n    Wallet,\n    WalletWithFeatures,\n    WalletWithRequiredFeatures,\n} from '@iota/wallet-standard';\nimport { getWallets, isWalletWithRequiredFeatureSet } from '@iota/wallet-standard';\n\nexport function getRegisteredWallets<AdditionalFeatures extends Wallet['features']>(\n    preferredWallets: string[],\n    walletFilter?: (wallet: WalletWithRequiredFeatures) => boolean,\n) {\n    const walletsApi = getWallets();\n    const wallets = walletsApi.get();\n\n    const iotaWallets = wallets.filter(\n        (wallet): wallet is WalletWithFeatures<MinimallyRequiredFeatures & AdditionalFeatures> =>\n            isWalletWithRequiredFeatureSet(wallet) && (!walletFilter || walletFilter(wallet)),\n    );\n\n    return [\n        // Preferred wallets, in order:\n        ...(preferredWallets\n            .map((name) => iotaWallets.find((wallet) => wallet.name === name))\n            .filter(Boolean) as WalletWithFeatures<\n            MinimallyRequiredFeatures & AdditionalFeatures\n        >[]),\n\n        // Wallets in default order:\n        ...iotaWallets.filter((wallet) => !preferredWallets.includes(wallet.name)),\n    ];\n}\n\nexport function getWalletUniqueIdentifier(wallet?: Wallet) {\n    return wallet?.id ?? wallet?.name;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isSupportedChain } from '@iota/wallet-standard';\nimport type {\n    StandardConnectInput,\n    StandardConnectOutput,\n    WalletAccount,\n    WalletWithRequiredFeatures,\n} from '@iota/wallet-standard';\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query';\nimport { useMutation } from '@tanstack/react-query';\n\nimport { walletMutationKeys } from '../../constants/walletMutationKeys.js';\nimport { useWalletStore } from './useWalletStore.js';\n\ntype ConnectWalletArgs = {\n    /** The wallet to connect to. */\n    wallet: WalletWithRequiredFeatures;\n\n    /** An optional account address to connect to. Defaults to the first authorized account. */\n    accountAddress?: string;\n} & StandardConnectInput;\n\ntype ConnectWalletResult = StandardConnectOutput;\n\ntype UseConnectWalletMutationOptions = Omit<\n    UseMutationOptions<ConnectWalletResult, Error, ConnectWalletArgs, unknown>,\n    'mutationFn'\n>;\n\n/**\n * Mutation hook for establishing a connection to a specific wallet.\n */\nexport function useConnectWallet({\n    mutationKey,\n    ...mutationOptions\n}: UseConnectWalletMutationOptions = {}): UseMutationResult<\n    ConnectWalletResult,\n    Error,\n    ConnectWalletArgs,\n    unknown\n> {\n    const setWalletConnected = useWalletStore((state) => state.setWalletConnected);\n    const setConnectionStatus = useWalletStore((state) => state.setConnectionStatus);\n\n    return useMutation({\n        mutationKey: walletMutationKeys.connectWallet(mutationKey),\n        mutationFn: async ({ wallet, accountAddress, ...connectArgs }) => {\n            try {\n                setConnectionStatus('connecting');\n\n                const connectResult =\n                    await wallet.features['standard:connect'].connect(connectArgs);\n                const connectedIotaAccounts = connectResult.accounts.filter((account) =>\n                    account.chains.some(isSupportedChain),\n                );\n                const selectedAccount = getSelectedAccount(connectedIotaAccounts, accountAddress);\n\n                setWalletConnected(\n                    wallet,\n                    connectedIotaAccounts,\n                    selectedAccount,\n                    connectResult.supportedIntents,\n                );\n\n                return { accounts: connectedIotaAccounts };\n            } catch (error) {\n                setConnectionStatus('disconnected');\n                throw error;\n            }\n        },\n        ...mutationOptions,\n    });\n}\n\nfunction getSelectedAccount(connectedAccounts: readonly WalletAccount[], accountAddress?: string) {\n    if (connectedAccounts.length === 0) {\n        return null;\n    }\n\n    if (accountAddress) {\n        const selectedAccount = connectedAccounts.find(\n            (account) => account.address === accountAddress,\n        );\n        return selectedAccount ?? connectedAccounts[0];\n    }\n\n    return connectedAccounts[0];\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { MutationKey } from '@tanstack/react-query';\n\nexport const walletMutationKeys = {\n    all: { baseScope: 'wallet' },\n    connectWallet: formMutationKeyFn('connect-wallet'),\n    autoconnectWallet: formMutationKeyFn('autoconnect-wallet'),\n    disconnectWallet: formMutationKeyFn('disconnect-wallet'),\n    signPersonalMessage: formMutationKeyFn('sign-personal-message'),\n    signTransaction: formMutationKeyFn('sign-transaction'),\n    signAndExecuteTransaction: formMutationKeyFn('sign-and-execute-transaction'),\n    switchAccount: formMutationKeyFn('switch-account'),\n    reportTransactionEffects: formMutationKeyFn('report-transaction-effects'),\n};\n\nfunction formMutationKeyFn(baseEntity: string) {\n    return function mutationKeyFn(additionalKeys: MutationKey = []) {\n        return [{ ...walletMutationKeys.all, baseEntity }, ...additionalKeys];\n    };\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\n\nimport { WalletContext } from '../../contexts/walletContext.js';\nimport type { StoreState } from '../../walletStore.js';\n\nexport function useWalletStore<T>(selector: (state: StoreState) => T): T {\n    const store = useContext(WalletContext);\n    if (!store) {\n        throw new Error(\n            'Could not find WalletContext. Ensure that you have set up the WalletProvider.',\n        );\n    }\n    return useStore(store, selector);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { createContext } from 'react';\n\nimport type { WalletStore } from '../walletStore.js';\n\nexport const WalletContext = createContext<WalletStore | null>(null);\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useWalletStore } from './useWalletStore.js';\n\n/**\n * Retrieves the wallet that is currently connected to the dApp, if one exists.\n */\nexport function useCurrentWallet() {\n    const currentWallet = useWalletStore((state) => state.currentWallet);\n    const connectionStatus = useWalletStore((state) => state.connectionStatus);\n    const supportedIntents = useWalletStore((state) => state.supportedIntents);\n\n    switch (connectionStatus) {\n        case 'connecting':\n            return {\n                connectionStatus,\n                currentWallet: null,\n                isDisconnected: false,\n                isConnecting: true,\n                isConnected: false,\n                supportedIntents: [],\n            } as const;\n        case 'disconnected':\n            return {\n                connectionStatus,\n                currentWallet: null,\n                isDisconnected: true,\n                isConnecting: false,\n                isConnected: false,\n                supportedIntents: [],\n            } as const;\n        case 'connected': {\n            return {\n                connectionStatus,\n                currentWallet: currentWallet!,\n                isDisconnected: false,\n                isConnecting: false,\n                isConnected: true,\n                supportedIntents,\n            } as const;\n        }\n    }\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useWalletStore } from './useWalletStore.js';\n\n/**\n * Retrieves a list of registered wallets available to the dApp sorted by preference.\n */\nexport function useWallets() {\n    return useWalletStore((state) => state.wallets);\n}\n"],
  "mappings": "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",
  "names": ["import_react_query", "import_react", "import_wallet_standard", "import_react", "wallet"]
}
