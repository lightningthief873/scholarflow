{
  "version": 3,
  "sources": ["../../../src/hooks/useIotaClient.ts", "../../../src/components/IotaClientProvider.tsx", "../../../src/hooks/networkConfig.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { IotaClient } from '@iota/iota-sdk/client';\nimport { useContext } from 'react';\n\nimport { IotaClientContext } from '../components/IotaClientProvider.js';\n\nexport function useIotaClientContext() {\n    const iotaClient = useContext(IotaClientContext);\n\n    if (!iotaClient) {\n        throw new Error(\n            'Could not find IotaClientContext. Ensure that you have set up the IotaClientProvider',\n        );\n    }\n\n    return iotaClient;\n}\n\nexport function useIotaClient(): IotaClient {\n    return useIotaClientContext().client;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getNetwork, isIotaClient, Network, IotaClient } from '@iota/iota-sdk/client';\nimport type { IotaClientOptions } from '@iota/iota-sdk/client';\nimport { createContext, useMemo, useState } from 'react';\n\nimport type { NetworkConfig } from '../hooks/networkConfig.js';\n\ntype NetworkConfigs<T extends NetworkConfig | IotaClient = NetworkConfig | IotaClient> = Record<\n    string,\n    T\n>;\n\nexport interface IotaClientProviderContext {\n    client: IotaClient;\n    networks: NetworkConfigs;\n    network: string;\n    config: NetworkConfig | null;\n    selectNetwork: (network: string) => void;\n}\n\nexport const IotaClientContext = createContext<IotaClientProviderContext | null>(null);\n\nexport type IotaClientProviderProps<T extends NetworkConfigs> = {\n    createClient?: (name: keyof T, config: T[keyof T]) => IotaClient;\n    children: React.ReactNode;\n    networks?: T;\n    onNetworkChange?: (network: keyof T & string) => void;\n} & (\n    | {\n          defaultNetwork?: keyof T & string;\n          network?: never;\n      }\n    | {\n          defaultNetwork?: never;\n          network?: keyof T & string;\n      }\n);\n\nconst DEFAULT_NETWORKS = {\n    localnet: { url: getNetwork(Network.Localnet)?.url },\n};\n\nconst DEFAULT_CREATE_CLIENT = function createClient(\n    _name: string,\n    config: NetworkConfig | IotaClient,\n) {\n    if (isIotaClient(config)) {\n        return config;\n    }\n\n    return new IotaClient(config);\n};\n\nexport function IotaClientProvider<T extends NetworkConfigs>(props: IotaClientProviderProps<T>) {\n    const { onNetworkChange, network, children } = props;\n    const networks = (props.networks ?? DEFAULT_NETWORKS) as T;\n    const createClient =\n        (props.createClient as typeof DEFAULT_CREATE_CLIENT) ?? DEFAULT_CREATE_CLIENT;\n\n    const [selectedNetwork, setSelectedNetwork] = useState<keyof T & string>(\n        props.network ?? props.defaultNetwork ?? (Object.keys(networks)[0] as keyof T & string),\n    );\n\n    const currentNetwork = props.network ?? selectedNetwork;\n\n    const client = useMemo(() => {\n        return createClient(currentNetwork, networks[currentNetwork]);\n    }, [createClient, currentNetwork, networks]);\n\n    const ctx = useMemo((): IotaClientProviderContext => {\n        return {\n            client,\n            networks,\n            network: currentNetwork,\n            config:\n                networks[currentNetwork] instanceof IotaClient\n                    ? null\n                    : (networks[currentNetwork] as IotaClientOptions),\n            selectNetwork: (newNetwork) => {\n                if (currentNetwork === newNetwork) {\n                    return;\n                }\n\n                if (!network && newNetwork !== selectedNetwork) {\n                    setSelectedNetwork(newNetwork);\n                }\n\n                onNetworkChange?.(newNetwork);\n            },\n        };\n    }, [client, networks, selectedNetwork, currentNetwork, network, onNetworkChange]);\n\n    return <IotaClientContext.Provider value={ctx}>{children}</IotaClientContext.Provider>;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { IotaClientOptions } from '@iota/iota-sdk/client';\n\nimport { useIotaClientContext } from './useIotaClient.js';\n\nexport type NetworkConfig<T extends object = object> = IotaClientOptions & {\n    variables?: T;\n};\n\nexport function createNetworkConfig<\n    const T extends Record<string, Config>,\n    Config extends NetworkConfig<Variables> = T[keyof T],\n    Variables extends object = NonNullable<Config['variables']>,\n>(networkConfig: T) {\n    function useNetworkConfig(): Config {\n        const { config } = useIotaClientContext();\n\n        if (!config) {\n            throw new Error('No network config found');\n        }\n\n        return config as T[keyof T];\n    }\n\n    function useNetworkVariables(): Variables {\n        const { variables } = useNetworkConfig();\n\n        return (variables ?? {}) as Variables;\n    }\n\n    function useNetworkVariable<K extends keyof Variables>(name: K): Variables[K] {\n        const variables = useNetworkVariables();\n\n        return variables[name];\n    }\n\n    return {\n        networkConfig,\n        useNetworkConfig,\n        useNetworkVariables,\n        useNetworkVariable,\n    };\n}\n"],
  "mappings": ";AAKA,SAAS,kBAAkB;;;ACD3B,SAAS,YAAY,cAAc,SAAS,kBAAkB;AAE9D,SAAS,eAAe,SAAS,gBAAgB;AAyFtC;AAxEJ,IAAM,oBAAoB,cAAgD,IAAI;AAkBrF,IAAM,mBAAmB;AAAA,EACrB,UAAU,EAAE,KAAK,WAAW,QAAQ,QAAQ,GAAG,IAAI;AACvD;;;ADlCO,SAAS,uBAAuB;AACnC,QAAM,aAAa,WAAW,iBAAiB;AAE/C,MAAI,CAAC,YAAY;AACb,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO;AACX;;;AEPO,SAAS,oBAId,eAAkB;AAChB,WAAS,mBAA2B;AAChC,UAAM,EAAE,OAAO,IAAI,qBAAqB;AAExC,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC7C;AAEA,WAAO;AAAA,EACX;AAEA,WAAS,sBAAiC;AACtC,UAAM,EAAE,UAAU,IAAI,iBAAiB;AAEvC,WAAQ,aAAa,CAAC;AAAA,EAC1B;AAEA,WAAS,mBAA8C,MAAuB;AAC1E,UAAM,YAAY,oBAAoB;AAEtC,WAAO,UAAU,IAAI;AAAA,EACzB;AAEA,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ;",
  "names": []
}
