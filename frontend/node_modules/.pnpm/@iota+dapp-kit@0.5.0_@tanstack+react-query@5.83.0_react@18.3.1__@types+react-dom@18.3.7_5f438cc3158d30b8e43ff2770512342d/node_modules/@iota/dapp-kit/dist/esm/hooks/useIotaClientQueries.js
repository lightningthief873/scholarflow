// src/hooks/useIotaClientQueries.ts
import { useQueries } from "@tanstack/react-query";

// src/hooks/useIotaClient.ts
import { useContext } from "react";

// src/components/IotaClientProvider.tsx
import { getNetwork, isIotaClient, Network, IotaClient } from "@iota/iota-sdk/client";
import { createContext, useMemo, useState } from "react";
import { jsx } from "react/jsx-runtime";
var IotaClientContext = createContext(null);
var DEFAULT_NETWORKS = {
  localnet: { url: getNetwork(Network.Localnet)?.url }
};

// src/hooks/useIotaClient.ts
function useIotaClientContext() {
  const iotaClient = useContext(IotaClientContext);
  if (!iotaClient) {
    throw new Error(
      "Could not find IotaClientContext. Ensure that you have set up the IotaClientProvider"
    );
  }
  return iotaClient;
}

// src/hooks/useIotaClientQueries.ts
function useIotaClientQueries({
  queries,
  combine
}) {
  const iotaContext = useIotaClientContext();
  return useQueries({
    combine,
    queries: queries.map((query) => {
      const { method, params, options: { queryKey = [], ...restOptions } = {} } = query;
      return {
        ...restOptions,
        queryKey: [iotaContext.network, method, params, ...queryKey],
        queryFn: async () => {
          return await iotaContext.client[method](params);
        }
      };
    })
  });
}
export {
  useIotaClientQueries
};
//# sourceMappingURL=useIotaClientQueries.js.map
