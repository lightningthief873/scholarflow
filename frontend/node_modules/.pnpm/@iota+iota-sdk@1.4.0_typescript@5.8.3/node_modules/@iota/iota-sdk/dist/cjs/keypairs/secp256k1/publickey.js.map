{
  "version": 3,
  "sources": ["../../../../src/keypairs/secp256k1/publickey.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@iota/bcs';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport { bytesEqual, PublicKey } from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\nimport { parseSerializedSignature } from '../../cryptography/signature.js';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey extends PublicKey {\n    static SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n    private data: Uint8Array;\n\n    /**\n     * Create a new Secp256k1PublicKey object\n     * @param value secp256k1 public key as buffer or base-64 encoded string\n     */\n    constructor(value: PublicKeyInitData) {\n        super();\n\n        if (typeof value === 'string') {\n            this.data = fromB64(value);\n        } else if (value instanceof Uint8Array) {\n            this.data = value;\n        } else {\n            this.data = Uint8Array.from(value);\n        }\n\n        if (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n            throw new Error(\n                `Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n            );\n        }\n    }\n\n    /**\n     * Checks if two Secp256k1 public keys are equal\n     */\n    override equals(publicKey: Secp256k1PublicKey): boolean {\n        return super.equals(publicKey);\n    }\n\n    /**\n     * Return the byte array representation of the Secp256k1 public key\n     */\n    toRawBytes(): Uint8Array {\n        return this.data;\n    }\n\n    /**\n     * Return the IOTA address associated with this Secp256k1 public key\n     */\n    flag(): number {\n        return SIGNATURE_SCHEME_TO_FLAG['Secp256k1'];\n    }\n\n    /**\n     * Verifies that the signature is valid for the provided message\n     */\n    async verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n        let bytes;\n        if (typeof signature === 'string') {\n            const parsed = parseSerializedSignature(signature);\n            if (parsed.signatureScheme !== 'Secp256k1') {\n                throw new Error('Invalid signature scheme');\n            }\n\n            if (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n                throw new Error('Signature does not match public key');\n            }\n\n            bytes = parsed.signature;\n        } else {\n            bytes = signature;\n        }\n\n        return secp256k1.verify(\n            secp256k1.Signature.fromCompact(bytes),\n            sha256(message),\n            this.toRawBytes(),\n        );\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,iBAAwB;AACxB,uBAA0B;AAC1B,oBAAuB;AAEvB,uBAAsC;AAEtC,8BAAyC;AACzC,uBAAyC;AAEzC,MAAM,4BAA4B;AAK3B,MAAM,2BAA2B,2BAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ9C,YAAY,OAA0B;AAClC,UAAM;AAEN,QAAI,OAAO,UAAU,UAAU;AAC3B,WAAK,WAAO,oBAAQ,KAAK;AAAA,IAC7B,WAAW,iBAAiB,YAAY;AACpC,WAAK,OAAO;AAAA,IAChB,OAAO;AACH,WAAK,OAAO,WAAW,KAAK,KAAK;AAAA,IACrC;AAEA,QAAI,KAAK,KAAK,WAAW,2BAA2B;AAChD,YAAM,IAAI;AAAA,QACN,sCAAsC,yBAAyB,eAAe,KAAK,KAAK,MAAM;AAAA,MAClG;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKS,OAAO,WAAwC;AACpD,WAAO,MAAM,OAAO,SAAS;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,aAAyB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe;AACX,WAAO,iDAAyB,WAAW;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,SAAqB,WAAkD;AAChF,QAAI;AACJ,QAAI,OAAO,cAAc,UAAU;AAC/B,YAAM,aAAS,2CAAyB,SAAS;AACjD,UAAI,OAAO,oBAAoB,aAAa;AACxC,cAAM,IAAI,MAAM,0BAA0B;AAAA,MAC9C;AAEA,UAAI,KAAC,6BAAW,KAAK,WAAW,GAAG,OAAO,SAAS,GAAG;AAClD,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACzD;AAEA,cAAQ,OAAO;AAAA,IACnB,OAAO;AACH,cAAQ;AAAA,IACZ;AAEA,WAAO,2BAAU;AAAA,MACb,2BAAU,UAAU,YAAY,KAAK;AAAA,UACrC,sBAAO,OAAO;AAAA,MACd,KAAK,WAAW;AAAA,IACpB;AAAA,EACJ;AACJ;AAzEa,mBACF,OAAO;",
  "names": []
}
