{
  "version": 3,
  "sources": ["../../../src/transactions/utils.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { IotaMoveNormalizedType } from '../client/index.js';\nimport { normalizeIotaAddress } from '../utils/iota-types.js';\nimport type { CallArg } from './data/internal.js';\n\nexport function extractMutableReference(\n    normalizedType: IotaMoveNormalizedType,\n): IotaMoveNormalizedType | undefined {\n    return typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n        ? normalizedType.MutableReference\n        : undefined;\n}\n\nexport function extractReference(\n    normalizedType: IotaMoveNormalizedType,\n): IotaMoveNormalizedType | undefined {\n    return typeof normalizedType === 'object' && 'Reference' in normalizedType\n        ? normalizedType.Reference\n        : undefined;\n}\n\nexport function extractStructTag(\n    normalizedType: IotaMoveNormalizedType,\n): Extract<IotaMoveNormalizedType, { Struct: unknown }> | undefined {\n    if (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n        return normalizedType;\n    }\n\n    const ref = extractReference(normalizedType);\n    const mutRef = extractMutableReference(normalizedType);\n\n    if (typeof ref === 'object' && 'Struct' in ref) {\n        return ref;\n    }\n\n    if (typeof mutRef === 'object' && 'Struct' in mutRef) {\n        return mutRef;\n    }\n    return undefined;\n}\n\nexport function getIdFromCallArg(arg: string | CallArg) {\n    if (typeof arg === 'string') {\n        return normalizeIotaAddress(arg);\n    }\n\n    if (arg.Object) {\n        if (arg.Object.ImmOrOwnedObject) {\n            return normalizeIotaAddress(arg.Object.ImmOrOwnedObject.objectId);\n        }\n\n        if (arg.Object.Receiving) {\n            return normalizeIotaAddress(arg.Object.Receiving.objectId);\n        }\n\n        return normalizeIotaAddress(arg.Object.SharedObject.objectId);\n    }\n\n    if (arg.UnresolvedObject) {\n        return normalizeIotaAddress(arg.UnresolvedObject.objectId);\n    }\n\n    return undefined;\n}\n"],
  "mappings": "AAKA,SAAS,4BAA4B;AAG9B,SAAS,wBACZ,gBACkC;AAClC,SAAO,OAAO,mBAAmB,YAAY,sBAAsB,iBAC7D,eAAe,mBACf;AACV;AAEO,SAAS,iBACZ,gBACkC;AAClC,SAAO,OAAO,mBAAmB,YAAY,eAAe,iBACtD,eAAe,YACf;AACV;AAEO,SAAS,iBACZ,gBACgE;AAChE,MAAI,OAAO,mBAAmB,YAAY,YAAY,gBAAgB;AAClE,WAAO;AAAA,EACX;AAEA,QAAM,MAAM,iBAAiB,cAAc;AAC3C,QAAM,SAAS,wBAAwB,cAAc;AAErD,MAAI,OAAO,QAAQ,YAAY,YAAY,KAAK;AAC5C,WAAO;AAAA,EACX;AAEA,MAAI,OAAO,WAAW,YAAY,YAAY,QAAQ;AAClD,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEO,SAAS,iBAAiB,KAAuB;AACpD,MAAI,OAAO,QAAQ,UAAU;AACzB,WAAO,qBAAqB,GAAG;AAAA,EACnC;AAEA,MAAI,IAAI,QAAQ;AACZ,QAAI,IAAI,OAAO,kBAAkB;AAC7B,aAAO,qBAAqB,IAAI,OAAO,iBAAiB,QAAQ;AAAA,IACpE;AAEA,QAAI,IAAI,OAAO,WAAW;AACtB,aAAO,qBAAqB,IAAI,OAAO,UAAU,QAAQ;AAAA,IAC7D;AAEA,WAAO,qBAAqB,IAAI,OAAO,aAAa,QAAQ;AAAA,EAChE;AAEA,MAAI,IAAI,kBAAkB;AACtB,WAAO,qBAAqB,IAAI,iBAAiB,QAAQ;AAAA,EAC7D;AAEA,SAAO;AACX;",
  "names": []
}
