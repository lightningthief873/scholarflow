{
  "version": 3,
  "sources": ["../../../../src/transactions/data/internal.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumInputShape, EnumOutputShape } from '@iota/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n    array,\n    boolean,\n    check,\n    integer,\n    lazy,\n    literal,\n    nullable,\n    nullish,\n    number,\n    object,\n    optional,\n    pipe,\n    record,\n    string,\n    transform,\n    tuple,\n    union,\n    unknown,\n} from 'valibot';\n\nimport { isValidIotaAddress, normalizeIotaAddress } from '../../utils/iota-types.js';\n\ntype Merge<T> = T extends object ? { [K in keyof T]: T[K] } : never;\n\ntype EnumSchema<T extends Record<string, GenericSchema<any>>> = GenericSchema<\n    EnumInputShape<\n        Merge<{\n            [K in keyof T]: InferInput<T[K]>;\n        }>\n    >,\n    EnumOutputShape<\n        Merge<{\n            [K in keyof T]: InferOutput<T[K]>;\n        }>\n    >\n>;\n\nexport function safeEnum<T extends Record<string, GenericSchema<any>>>(options: T): EnumSchema<T> {\n    const unionOptions = Object.entries(options).map(([key, value]) => object({ [key]: value }));\n\n    return pipe(\n        union(unionOptions),\n        transform((value) => ({\n            ...value,\n            $kind: Object.keys(value)[0] as keyof typeof value,\n        })),\n    ) as EnumSchema<T>;\n}\n\nexport const IotaAddress = pipe(\n    string(),\n    transform((value) => normalizeIotaAddress(value)),\n    check(isValidIotaAddress),\n);\nexport const ObjectID = IotaAddress;\nexport const BCSBytes = string();\nexport const JsonU64 = pipe(\n    union([string(), pipe(number(), integer())]),\n\n    check((val) => {\n        try {\n            BigInt(val);\n            return BigInt(val) >= 0 && BigInt(val) <= 18446744073709551615n;\n        } catch {\n            return false;\n        }\n    }, 'Invalid u64'),\n);\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/base_types.rs#L138\n// Implemented as a tuple in rust\nexport const ObjectRef = object({\n    objectId: IotaAddress,\n    version: JsonU64,\n    digest: string(),\n});\nexport type ObjectRef = InferOutput<typeof ObjectRef>;\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L690-L702\nexport const Argument = pipe(\n    union([\n        object({ GasCoin: literal(true) }),\n        object({ Input: pipe(number(), integer()), type: optional(literal('pure')) }),\n        object({ Input: pipe(number(), integer()), type: optional(literal('object')) }),\n        object({ Result: pipe(number(), integer()) }),\n        object({ NestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]) }),\n    ]),\n    transform((value) => ({\n        ...value,\n        $kind: Object.keys(value)[0] as keyof typeof value,\n    })),\n    // Defined manually to add `type?: 'pure' | 'object'` to Input\n) as GenericSchema<\n    // Input\n    | { GasCoin: true }\n    | { Input: number; type?: 'pure' | 'object' }\n    | { Result: number }\n    | { NestedResult: [number, number] },\n    // Output\n    | { $kind: 'GasCoin'; GasCoin: true }\n    | { $kind: 'Input'; Input: number; type?: 'pure' }\n    | { $kind: 'Input'; Input: number; type?: 'object' }\n    | { $kind: 'Result'; Result: number }\n    | { $kind: 'NestedResult'; NestedResult: [number, number] }\n>;\n\nexport type Argument = InferOutput<typeof Argument>;\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L1387-L1392\nexport const GasData = object({\n    budget: nullable(JsonU64),\n    price: nullable(JsonU64),\n    owner: nullable(IotaAddress),\n    payment: nullable(array(ObjectRef)),\n});\nexport type GasData = InferOutput<typeof GasData>;\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/external-crates/move/crates/move-core-types/src/language_storage.rs#L140-L147\nexport const StructTag = object({\n    address: string(),\n    module: string(),\n    name: string(),\n    // type_params in rust, should be updated to use camelCase\n    typeParams: array(string()),\n});\nexport type StructTag = InferOutput<typeof StructTag>;\n\n// https://github.com/iotaledger/iota/blob/cea8742e810142a8145fd83c4c142d61e561004a/crates/iota-graphql-rpc/schema/current_progress_schema.graphql#L1614-L1627\nexport type OpenMoveTypeSignatureBody =\n    | 'address'\n    | 'bool'\n    | 'u8'\n    | 'u16'\n    | 'u32'\n    | 'u64'\n    | 'u128'\n    | 'u256'\n    | { vector: OpenMoveTypeSignatureBody }\n    | {\n          datatype: {\n              package: string;\n              module: string;\n              type: string;\n              typeParameters: OpenMoveTypeSignatureBody[];\n          };\n      }\n    | { typeParameter: number };\n\nexport const OpenMoveTypeSignatureBody: GenericSchema<OpenMoveTypeSignatureBody> = union([\n    literal('address'),\n    literal('bool'),\n    literal('u8'),\n    literal('u16'),\n    literal('u32'),\n    literal('u64'),\n    literal('u128'),\n    literal('u256'),\n    object({ vector: lazy(() => OpenMoveTypeSignatureBody) }),\n    object({\n        datatype: object({\n            package: string(),\n            module: string(),\n            type: string(),\n            typeParameters: array(lazy(() => OpenMoveTypeSignatureBody)),\n        }),\n    }),\n    object({ typeParameter: pipe(number(), integer()) }),\n]);\n\n// https://github.com/iotaledger/iota/blob/cea8742e810142a8145fd83c4c142d61e561004a/crates/iota-graphql-rpc/schema/current_progress_schema.graphql#L1609-L1612\nexport const OpenMoveTypeSignature = object({\n    ref: nullable(union([literal('&'), literal('&mut')])),\n    body: OpenMoveTypeSignatureBody,\n});\nexport type OpenMoveTypeSignature = InferOutput<typeof OpenMoveTypeSignature>;\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L707-L718\nconst ProgrammableMoveCall = object({\n    package: ObjectID,\n    module: string(),\n    function: string(),\n    // snake case in rust\n    typeArguments: array(string()),\n    arguments: array(Argument),\n    _argumentTypes: optional(nullable(array(OpenMoveTypeSignature))),\n});\nexport type ProgrammableMoveCall = InferOutput<typeof ProgrammableMoveCall>;\n\nexport const $Intent = object({\n    name: string(),\n    inputs: record(string(), union([Argument, array(Argument)])),\n    data: record(string(), unknown()),\n});\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L657-L685\nexport const Command = safeEnum({\n    MoveCall: ProgrammableMoveCall,\n    TransferObjects: object({\n        objects: array(Argument),\n        address: Argument,\n    }),\n    SplitCoins: object({\n        coin: Argument,\n        amounts: array(Argument),\n    }),\n    MergeCoins: object({\n        destination: Argument,\n        sources: array(Argument),\n    }),\n    Publish: object({\n        modules: array(BCSBytes),\n        dependencies: array(ObjectID),\n    }),\n    MakeMoveVec: object({\n        type: nullable(string()),\n        elements: array(Argument),\n    }),\n    Upgrade: object({\n        modules: array(BCSBytes),\n        dependencies: array(ObjectID),\n        package: ObjectID,\n        ticket: Argument,\n    }),\n    $Intent,\n});\n\nexport type Command<Arg = Argument> = EnumOutputShape<{\n    MoveCall: {\n        package: string;\n        module: string;\n        function: string;\n        typeArguments: string[];\n        arguments: Arg[];\n        _argumentTypes?: OpenMoveTypeSignature[] | null;\n    };\n    TransferObjects: {\n        objects: Arg[];\n        address: Arg;\n    };\n    SplitCoins: {\n        coin: Arg;\n        amounts: Arg[];\n    };\n    MergeCoins: {\n        destination: Arg;\n        sources: Arg[];\n    };\n    Publish: {\n        modules: string[];\n        dependencies: string[];\n    };\n    MakeMoveVec: {\n        type: string | null;\n        elements: Arg[];\n    };\n    Upgrade: {\n        modules: string[];\n        dependencies: string[];\n        package: string;\n        ticket: Arg;\n    };\n    $Intent: {\n        name: string;\n        inputs: Record<string, Argument | Argument[]>;\n        data: Record<string, unknown>;\n    };\n}>;\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L102-L114\nexport const ObjectArg = safeEnum({\n    ImmOrOwnedObject: ObjectRef,\n    SharedObject: object({\n        objectId: ObjectID,\n        // snake case in rust\n        initialSharedVersion: JsonU64,\n        mutable: boolean(),\n    }),\n    Receiving: ObjectRef,\n});\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L75-L80\nconst CallArg = safeEnum({\n    Object: ObjectArg,\n    Pure: object({\n        bytes: BCSBytes,\n    }),\n    UnresolvedPure: object({\n        value: unknown(),\n    }),\n    UnresolvedObject: object({\n        objectId: ObjectID,\n        version: optional(nullable(JsonU64)),\n        digest: optional(nullable(string())),\n        initialSharedVersion: optional(nullable(JsonU64)),\n    }),\n});\nexport type CallArg = InferOutput<typeof CallArg>;\n\nexport const NormalizedCallArg = safeEnum({\n    Object: ObjectArg,\n    Pure: object({\n        bytes: BCSBytes,\n    }),\n});\n\nexport const TransactionExpiration = safeEnum({\n    None: literal(true),\n    Epoch: JsonU64,\n});\n\nexport type TransactionExpiration = InferOutput<typeof TransactionExpiration>;\n\nexport const TransactionData = object({\n    version: literal(2),\n    sender: nullish(IotaAddress),\n    expiration: nullish(TransactionExpiration),\n    gasData: GasData,\n    inputs: array(CallArg),\n    commands: array(Command),\n});\nexport type TransactionData = InferOutput<typeof TransactionData>;\n"],
  "mappings": "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",
  "names": []
}
