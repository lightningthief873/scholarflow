{
  "version": 3,
  "sources": ["../../../src/transactions/Inputs.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toB64 } from '@iota/bcs';\nimport type { SerializedBcs } from '@iota/bcs';\n\nimport { normalizeIotaAddress } from '../utils/iota-types.js';\nimport type { CallArg, ObjectRef } from './data/internal.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction Pure(data: Uint8Array | SerializedBcs<any>): Extract<CallArg, { Pure: unknown }> {\n    return {\n        $kind: 'Pure',\n        Pure: {\n            bytes: data instanceof Uint8Array ? toB64(data) : data.toBase64(),\n        },\n    };\n}\n\nexport const Inputs = {\n    Pure,\n    ObjectRef({ objectId, digest, version }: ObjectRef): Extract<CallArg, { Object: unknown }> {\n        return {\n            $kind: 'Object',\n            Object: {\n                $kind: 'ImmOrOwnedObject',\n                ImmOrOwnedObject: {\n                    digest,\n                    version,\n                    objectId: normalizeIotaAddress(objectId),\n                },\n            },\n        };\n    },\n    SharedObjectRef({\n        objectId,\n        mutable,\n        initialSharedVersion,\n    }: {\n        objectId: string;\n        mutable: boolean;\n        initialSharedVersion: number | string;\n    }): Extract<CallArg, { Object: unknown }> {\n        return {\n            $kind: 'Object',\n            Object: {\n                $kind: 'SharedObject',\n                SharedObject: {\n                    mutable,\n                    initialSharedVersion,\n                    objectId: normalizeIotaAddress(objectId),\n                },\n            },\n        };\n    },\n    ReceivingRef({ objectId, digest, version }: ObjectRef): Extract<CallArg, { Object: unknown }> {\n        return {\n            $kind: 'Object',\n            Object: {\n                $kind: 'Receiving',\n                Receiving: {\n                    digest,\n                    version,\n                    objectId: normalizeIotaAddress(objectId),\n                },\n            },\n        };\n    },\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,iBAAsB;AAGtB,wBAAqC;AAIrC,SAAS,KAAK,MAA4E;AACtF,SAAO;AAAA,IACH,OAAO;AAAA,IACP,MAAM;AAAA,MACF,OAAO,gBAAgB,iBAAa,kBAAM,IAAI,IAAI,KAAK,SAAS;AAAA,IACpE;AAAA,EACJ;AACJ;AAEO,MAAM,SAAS;AAAA,EAClB;AAAA,EACA,UAAU,EAAE,UAAU,QAAQ,QAAQ,GAAqD;AACvF,WAAO;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,QACJ,OAAO;AAAA,QACP,kBAAkB;AAAA,UACd;AAAA,UACA;AAAA,UACA,cAAU,wCAAqB,QAAQ;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACJ,GAI0C;AACtC,WAAO;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,QACJ,OAAO;AAAA,QACP,cAAc;AAAA,UACV;AAAA,UACA;AAAA,UACA,cAAU,wCAAqB,QAAQ;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,aAAa,EAAE,UAAU,QAAQ,QAAQ,GAAqD;AAC1F,WAAO;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,QACJ,OAAO;AAAA,QACP,WAAW;AAAA,UACP;AAAA,UACA;AAAA,UACA,cAAU,wCAAqB,QAAQ;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
