{
  "version": 3,
  "sources": ["../../../src/multisig/signer.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\nimport { toB64 } from '@iota/bcs';\n\nimport type { SignatureScheme } from '../cryptography/index.js';\nimport { Signer } from '../cryptography/index.js';\nimport type { MultiSigPublicKey } from './publickey.js';\n\nexport class MultiSigSigner extends Signer {\n    #pubkey: MultiSigPublicKey;\n    #signers: Signer[];\n\n    constructor(pubkey: MultiSigPublicKey, signers: Signer[] = []) {\n        super();\n        this.#pubkey = pubkey;\n        this.#signers = signers;\n\n        const uniqueKeys = new Set();\n        let combinedWeight = 0;\n\n        const weights = pubkey.getPublicKeys().map(({ weight, publicKey }) => ({\n            weight,\n            address: publicKey.toIotaAddress(),\n        }));\n\n        for (const signer of signers) {\n            const address = signer.toIotaAddress();\n            if (uniqueKeys.has(address)) {\n                throw new Error(`Can't create MultiSigSigner with duplicate signers`);\n            }\n            uniqueKeys.add(address);\n\n            const weight = weights.find((w) => w.address === address)?.weight;\n\n            if (!weight) {\n                throw new Error(`Signer ${address} is not part of the MultiSig public key`);\n            }\n\n            combinedWeight += weight;\n        }\n\n        if (combinedWeight < pubkey.getThreshold()) {\n            throw new Error(`Combined weight of signers is less than threshold`);\n        }\n    }\n\n    getKeyScheme(): SignatureScheme {\n        return 'MultiSig';\n    }\n\n    getPublicKey(): MultiSigPublicKey {\n        return this.#pubkey;\n    }\n\n    sign(_data: Uint8Array): never {\n        throw new Error(\n            'MultiSigSigner does not support signing directly. Use signTransaction or signPersonalMessage instead',\n        );\n    }\n\n    signData(_data: Uint8Array): never {\n        throw new Error(\n            'MultiSigSigner does not support signing directly. Use signTransaction or signPersonalMessage instead',\n        );\n    }\n\n    async signTransaction(bytes: Uint8Array) {\n        const signature = this.#pubkey.combinePartialSignatures(\n            await Promise.all(\n                this.#signers.map(\n                    async (signer) => (await signer.signTransaction(bytes)).signature,\n                ),\n            ),\n        );\n\n        return {\n            signature,\n            bytes: toB64(bytes),\n        };\n    }\n\n    async signPersonalMessage(bytes: Uint8Array) {\n        const signature = this.#pubkey.combinePartialSignatures(\n            await Promise.all(\n                this.#signers.map(\n                    async (signer) => (await signer.signPersonalMessage(bytes)).signature,\n                ),\n            ),\n        );\n\n        return {\n            signature,\n            bytes: toB64(bytes),\n        };\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAsB;AAGtB,0BAAuB;AANvB;AASO,MAAM,uBAAuB,2BAAO;AAAA,EAIvC,YAAY,QAA2B,UAAoB,CAAC,GAAG;AAC3D,UAAM;AAJV;AACA;AAII,uBAAK,SAAU;AACf,uBAAK,UAAW;AAEhB,UAAM,aAAa,oBAAI,IAAI;AAC3B,QAAI,iBAAiB;AAErB,UAAM,UAAU,OAAO,cAAc,EAAE,IAAI,CAAC,EAAE,QAAQ,UAAU,OAAO;AAAA,MACnE;AAAA,MACA,SAAS,UAAU,cAAc;AAAA,IACrC,EAAE;AAEF,eAAW,UAAU,SAAS;AAC1B,YAAM,UAAU,OAAO,cAAc;AACrC,UAAI,WAAW,IAAI,OAAO,GAAG;AACzB,cAAM,IAAI,MAAM,oDAAoD;AAAA,MACxE;AACA,iBAAW,IAAI,OAAO;AAEtB,YAAM,SAAS,QAAQ,KAAK,CAAC,MAAM,EAAE,YAAY,OAAO,GAAG;AAE3D,UAAI,CAAC,QAAQ;AACT,cAAM,IAAI,MAAM,UAAU,OAAO,yCAAyC;AAAA,MAC9E;AAEA,wBAAkB;AAAA,IACtB;AAEA,QAAI,iBAAiB,OAAO,aAAa,GAAG;AACxC,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACvE;AAAA,EACJ;AAAA,EAEA,eAAgC;AAC5B,WAAO;AAAA,EACX;AAAA,EAEA,eAAkC;AAC9B,WAAO,mBAAK;AAAA,EAChB;AAAA,EAEA,KAAK,OAA0B;AAC3B,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,SAAS,OAA0B;AAC/B,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,gBAAgB,OAAmB;AACrC,UAAM,YAAY,mBAAK,SAAQ;AAAA,MAC3B,MAAM,QAAQ;AAAA,QACV,mBAAK,UAAS;AAAA,UACV,OAAO,YAAY,MAAM,OAAO,gBAAgB,KAAK,GAAG;AAAA,QAC5D;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,MACH;AAAA,MACA,WAAO,kBAAM,KAAK;AAAA,IACtB;AAAA,EACJ;AAAA,EAEA,MAAM,oBAAoB,OAAmB;AACzC,UAAM,YAAY,mBAAK,SAAQ;AAAA,MAC3B,MAAM,QAAQ;AAAA,QACV,mBAAK,UAAS;AAAA,UACV,OAAO,YAAY,MAAM,OAAO,oBAAoB,KAAK,GAAG;AAAA,QAChE;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO;AAAA,MACH;AAAA,MACA,WAAO,kBAAM,KAAK;AAAA,IACtB;AAAA,EACJ;AACJ;AAtFI;AACA;",
  "names": []
}
