export declare const ObjectOut: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    NotExist: true;
    ObjectWrite: [string, import("@iota/bcs").EnumOutputShapeWithKeys<{
        AddressOwner: string;
        ObjectOwner: string;
        Shared: {
            initialSharedVersion: string;
        };
        Immutable: true;
    }, "AddressOwner" | "ObjectOwner" | "Shared" | "Immutable">];
    PackageWrite: [string, string];
}, "NotExist" | "ObjectWrite" | "PackageWrite">, import("@iota/bcs").EnumInputShape<{
    NotExist: boolean | object | null;
    ObjectWrite: readonly [string, import("@iota/bcs").EnumInputShape<{
        AddressOwner: string | Uint8Array;
        ObjectOwner: string | Uint8Array;
        Shared: {
            initialSharedVersion: string | number | bigint;
        };
        Immutable: boolean | object | null;
    }>];
    PackageWrite: readonly [string | number | bigint, string];
}>>;
export declare const TransactionEffects: import("@iota/bcs").BcsType<{
    V1: {
        status: import("@iota/bcs").EnumOutputShapeWithKeys<{
            Success: true;
            Failed: {
                error: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    InsufficientGas: true;
                    InvalidGasObject: true;
                    InvariantViolation: true;
                    FeatureNotYetSupported: true;
                    MoveObjectTooBig: {
                        objectSize: string;
                        maxObjectSize: string;
                    };
                    MovePackageTooBig: {
                        objectSize: string;
                        maxObjectSize: string;
                    };
                    CircularObjectOwnership: {
                        object: string;
                    };
                    InsufficientCoinBalance: true;
                    CoinBalanceOverflow: true;
                    PublishErrorNonZeroAddress: true;
                    IotaMoveVerificationError: true;
                    MovePrimitiveRuntimeError: {
                        module: {
                            address: string;
                            name: string;
                        };
                        function: number;
                        instruction: number;
                        functionName: string | null;
                    } | null;
                    MoveAbort: [{
                        module: {
                            address: string;
                            name: string;
                        };
                        function: number;
                        instruction: number;
                        functionName: string | null;
                    }, string];
                    VMVerificationOrDeserializationError: true;
                    VMInvariantViolation: true;
                    FunctionNotFound: true;
                    ArityMismatch: true;
                    TypeArityMismatch: true;
                    NonEntryFunctionInvoked: true;
                    CommandArgumentError: {
                        argIdx: number;
                        kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            TypeMismatch: true;
                            InvalidBCSBytes: true;
                            InvalidUsageOfPureArg: true;
                            InvalidArgumentToPrivateEntryFunction: true;
                            IndexOutOfBounds: {
                                idx: number;
                            };
                            SecondaryIndexOutOfBounds: {
                                resultIdx: number;
                                secondaryIdx: number;
                            };
                            InvalidResultArity: {
                                resultIdx: number;
                            };
                            InvalidGasCoinUsage: true;
                            InvalidValueUsage: true;
                            InvalidObjectByValue: true;
                            InvalidObjectByMutRef: true;
                            SharedObjectOperationNotAllowed: true;
                        }, "TypeMismatch" | "InvalidBCSBytes" | "InvalidUsageOfPureArg" | "InvalidArgumentToPrivateEntryFunction" | "IndexOutOfBounds" | "SecondaryIndexOutOfBounds" | "InvalidResultArity" | "InvalidGasCoinUsage" | "InvalidValueUsage" | "InvalidObjectByValue" | "InvalidObjectByMutRef" | "SharedObjectOperationNotAllowed">;
                    };
                    TypeArgumentError: {
                        argumentIdx: number;
                        kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            TypeNotFound: true;
                            ConstraintNotSatisfied: true;
                        }, "TypeNotFound" | "ConstraintNotSatisfied">;
                    };
                    UnusedValueWithoutDrop: {
                        resultIdx: number;
                        secondaryIdx: number;
                    };
                    InvalidPublicFunctionReturnType: {
                        idx: number;
                    };
                    InvalidTransferObject: true;
                    EffectsTooLarge: {
                        currentSize: string;
                        maxSize: string;
                    };
                    PublishUpgradeMissingDependency: true;
                    PublishUpgradeDependencyDowngrade: true;
                    PackageUpgradeError: {
                        upgradeError: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            UnableToFetchPackage: {
                                packageId: string;
                            };
                            NotAPackage: {
                                objectId: string;
                            };
                            IncompatibleUpgrade: true;
                            DigestDoesNotMatch: {
                                digest: number[];
                            };
                            UnknownUpgradePolicy: {
                                policy: number;
                            };
                            PackageIDDoesNotMatch: {
                                packageId: string;
                                ticketId: string;
                            };
                        }, "UnableToFetchPackage" | "NotAPackage" | "IncompatibleUpgrade" | "DigestDoesNotMatch" | "UnknownUpgradePolicy" | "PackageIDDoesNotMatch">;
                    };
                    WrittenObjectsTooLarge: {
                        currentSize: string;
                        maxSize: string;
                    };
                    CertificateDenied: true;
                    IotaMoveVerificationTimedout: true;
                    SharedObjectOperationNotAllowed: true;
                    InputObjectDeleted: true;
                }, "PackageUpgradeError" | "SharedObjectOperationNotAllowed" | "CommandArgumentError" | "TypeArgumentError" | "InsufficientGas" | "InvalidGasObject" | "InvariantViolation" | "FeatureNotYetSupported" | "MoveObjectTooBig" | "MovePackageTooBig" | "CircularObjectOwnership" | "InsufficientCoinBalance" | "CoinBalanceOverflow" | "PublishErrorNonZeroAddress" | "IotaMoveVerificationError" | "MovePrimitiveRuntimeError" | "MoveAbort" | "VMVerificationOrDeserializationError" | "VMInvariantViolation" | "FunctionNotFound" | "ArityMismatch" | "TypeArityMismatch" | "NonEntryFunctionInvoked" | "UnusedValueWithoutDrop" | "InvalidPublicFunctionReturnType" | "InvalidTransferObject" | "EffectsTooLarge" | "PublishUpgradeMissingDependency" | "PublishUpgradeDependencyDowngrade" | "WrittenObjectsTooLarge" | "CertificateDenied" | "IotaMoveVerificationTimedout" | "InputObjectDeleted">;
                command: string | null;
            };
        }, "Success" | "Failed">;
        executedEpoch: string;
        gasUsed: {
            computationCost: string;
            computationCostBurned: string;
            storageCost: string;
            storageRebate: string;
            nonRefundableStorageFee: string;
        };
        transactionDigest: string;
        gasObjectIndex: number | null;
        eventsDigest: string | null;
        dependencies: string[];
        lamportVersion: string;
        changedObjects: [string, {
            inputState: import("@iota/bcs").EnumOutputShapeWithKeys<{
                NotExist: true;
                Exist: [[string, string], import("@iota/bcs").EnumOutputShapeWithKeys<{
                    AddressOwner: string;
                    ObjectOwner: string;
                    Shared: {
                        initialSharedVersion: string;
                    };
                    Immutable: true;
                }, "AddressOwner" | "ObjectOwner" | "Shared" | "Immutable">];
            }, "NotExist" | "Exist">;
            outputState: import("@iota/bcs").EnumOutputShapeWithKeys<{
                NotExist: true;
                ObjectWrite: [string, import("@iota/bcs").EnumOutputShapeWithKeys<{
                    AddressOwner: string;
                    ObjectOwner: string;
                    Shared: {
                        initialSharedVersion: string;
                    };
                    Immutable: true;
                }, "AddressOwner" | "ObjectOwner" | "Shared" | "Immutable">];
                PackageWrite: [string, string];
            }, "NotExist" | "ObjectWrite" | "PackageWrite">;
            idOperation: import("@iota/bcs").EnumOutputShapeWithKeys<{
                None: true;
                Created: true;
                Deleted: true;
            }, "None" | "Created" | "Deleted">;
        }][];
        unchangedSharedObjects: [string, import("@iota/bcs").EnumOutputShapeWithKeys<{
            ReadOnlyRoot: [string, string];
            MutateDeleted: string;
            ReadDeleted: string;
            Cancelled: string;
            PerEpochConfig: true;
        }, "ReadOnlyRoot" | "MutateDeleted" | "ReadDeleted" | "Cancelled" | "PerEpochConfig">][];
        auxDataDigest: string | null;
    };
    $kind: "V1";
}, {
    V1: {
        status: import("@iota/bcs").EnumInputShape<{
            Success: boolean | object | null;
            Failed: {
                error: import("@iota/bcs").EnumInputShape<{
                    InsufficientGas: boolean | object | null;
                    InvalidGasObject: boolean | object | null;
                    InvariantViolation: boolean | object | null;
                    FeatureNotYetSupported: boolean | object | null;
                    MoveObjectTooBig: {
                        objectSize: string | number | bigint;
                        maxObjectSize: string | number | bigint;
                    };
                    MovePackageTooBig: {
                        objectSize: string | number | bigint;
                        maxObjectSize: string | number | bigint;
                    };
                    CircularObjectOwnership: {
                        object: string | Uint8Array;
                    };
                    InsufficientCoinBalance: boolean | object | null;
                    CoinBalanceOverflow: boolean | object | null;
                    PublishErrorNonZeroAddress: boolean | object | null;
                    IotaMoveVerificationError: boolean | object | null;
                    MovePrimitiveRuntimeError: {
                        module: {
                            address: string | Uint8Array;
                            name: string;
                        };
                        function: number;
                        instruction: number;
                        functionName: string | null | undefined;
                    } | null | undefined;
                    MoveAbort: readonly [{
                        module: {
                            address: string | Uint8Array;
                            name: string;
                        };
                        function: number;
                        instruction: number;
                        functionName: string | null | undefined;
                    }, string | number | bigint];
                    VMVerificationOrDeserializationError: boolean | object | null;
                    VMInvariantViolation: boolean | object | null;
                    FunctionNotFound: boolean | object | null;
                    ArityMismatch: boolean | object | null;
                    TypeArityMismatch: boolean | object | null;
                    NonEntryFunctionInvoked: boolean | object | null;
                    CommandArgumentError: {
                        argIdx: number;
                        kind: import("@iota/bcs").EnumInputShape<{
                            TypeMismatch: boolean | object | null;
                            InvalidBCSBytes: boolean | object | null;
                            InvalidUsageOfPureArg: boolean | object | null;
                            InvalidArgumentToPrivateEntryFunction: boolean | object | null;
                            IndexOutOfBounds: {
                                idx: number;
                            };
                            SecondaryIndexOutOfBounds: {
                                resultIdx: number;
                                secondaryIdx: number;
                            };
                            InvalidResultArity: {
                                resultIdx: number;
                            };
                            InvalidGasCoinUsage: boolean | object | null;
                            InvalidValueUsage: boolean | object | null;
                            InvalidObjectByValue: boolean | object | null;
                            InvalidObjectByMutRef: boolean | object | null;
                            SharedObjectOperationNotAllowed: boolean | object | null;
                        }>;
                    };
                    TypeArgumentError: {
                        argumentIdx: number;
                        kind: import("@iota/bcs").EnumInputShape<{
                            TypeNotFound: boolean | object | null;
                            ConstraintNotSatisfied: boolean | object | null;
                        }>;
                    };
                    UnusedValueWithoutDrop: {
                        resultIdx: number;
                        secondaryIdx: number;
                    };
                    InvalidPublicFunctionReturnType: {
                        idx: number;
                    };
                    InvalidTransferObject: boolean | object | null;
                    EffectsTooLarge: {
                        currentSize: string | number | bigint;
                        maxSize: string | number | bigint;
                    };
                    PublishUpgradeMissingDependency: boolean | object | null;
                    PublishUpgradeDependencyDowngrade: boolean | object | null;
                    PackageUpgradeError: {
                        upgradeError: import("@iota/bcs").EnumInputShape<{
                            UnableToFetchPackage: {
                                packageId: string | Uint8Array;
                            };
                            NotAPackage: {
                                objectId: string | Uint8Array;
                            };
                            IncompatibleUpgrade: boolean | object | null;
                            DigestDoesNotMatch: {
                                digest: Iterable<number> & {
                                    length: number;
                                };
                            };
                            UnknownUpgradePolicy: {
                                policy: number;
                            };
                            PackageIDDoesNotMatch: {
                                packageId: string | Uint8Array;
                                ticketId: string | Uint8Array;
                            };
                        }>;
                    };
                    WrittenObjectsTooLarge: {
                        currentSize: string | number | bigint;
                        maxSize: string | number | bigint;
                    };
                    CertificateDenied: boolean | object | null;
                    IotaMoveVerificationTimedout: boolean | object | null;
                    SharedObjectOperationNotAllowed: boolean | object | null;
                    InputObjectDeleted: boolean | object | null;
                }>;
                command: string | number | bigint | null | undefined;
            };
        }>;
        executedEpoch: string | number | bigint;
        gasUsed: {
            computationCost: string | number | bigint;
            computationCostBurned: string | number | bigint;
            storageCost: string | number | bigint;
            storageRebate: string | number | bigint;
            nonRefundableStorageFee: string | number | bigint;
        };
        transactionDigest: string;
        gasObjectIndex: number | null | undefined;
        eventsDigest: string | null | undefined;
        dependencies: Iterable<string> & {
            length: number;
        };
        lamportVersion: string | number | bigint;
        changedObjects: Iterable<readonly [string | Uint8Array, {
            inputState: import("@iota/bcs").EnumInputShape<{
                NotExist: boolean | object | null;
                Exist: readonly [readonly [string | number | bigint, string], import("@iota/bcs").EnumInputShape<{
                    AddressOwner: string | Uint8Array;
                    ObjectOwner: string | Uint8Array;
                    Shared: {
                        initialSharedVersion: string | number | bigint;
                    };
                    Immutable: boolean | object | null;
                }>];
            }>;
            outputState: import("@iota/bcs").EnumInputShape<{
                NotExist: boolean | object | null;
                ObjectWrite: readonly [string, import("@iota/bcs").EnumInputShape<{
                    AddressOwner: string | Uint8Array;
                    ObjectOwner: string | Uint8Array;
                    Shared: {
                        initialSharedVersion: string | number | bigint;
                    };
                    Immutable: boolean | object | null;
                }>];
                PackageWrite: readonly [string | number | bigint, string];
            }>;
            idOperation: import("@iota/bcs").EnumInputShape<{
                None: boolean | object | null;
                Created: boolean | object | null;
                Deleted: boolean | object | null;
            }>;
        }]> & {
            length: number;
        };
        unchangedSharedObjects: Iterable<readonly [string | Uint8Array, import("@iota/bcs").EnumInputShape<{
            ReadOnlyRoot: readonly [string | number | bigint, string];
            MutateDeleted: string | number | bigint;
            ReadDeleted: string | number | bigint;
            Cancelled: string | number | bigint;
            PerEpochConfig: boolean | object | null;
        }>]> & {
            length: number;
        };
        auxDataDigest: string | null | undefined;
    };
}>;
