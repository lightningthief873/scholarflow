{
  "version": 3,
  "sources": ["../../../../src/transactions/executor/caching.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '../../bcs/index.js';\nimport type { ExecuteTransactionBlockParams, IotaClient } from '../../client/index.js';\nimport type { Signer } from '../../cryptography/keypair.js';\nimport type { BuildTransactionOptions } from '../json-rpc-resolver.js';\nimport type { ObjectCacheOptions } from '../ObjectCache.js';\nimport { ObjectCache } from '../ObjectCache.js';\nimport type { Transaction } from '../Transaction.js';\nimport { isTransaction } from '../Transaction.js';\n\nexport class CachingTransactionExecutor {\n    #client: IotaClient;\n    #lastDigest: string | null = null;\n    cache: ObjectCache;\n\n    constructor({\n        client,\n        ...options\n    }: ObjectCacheOptions & {\n        client: IotaClient;\n    }) {\n        this.#client = client;\n        this.cache = new ObjectCache(options);\n    }\n\n    /**\n     * Clears all Owned objects\n     * Immutable objects, Shared objects, and Move function definitions will be preserved\n     */\n    async reset() {\n        await Promise.all([\n            this.cache.clearOwnedObjects(),\n            this.cache.clearCustom(),\n            this.waitForLastTransaction(),\n        ]);\n    }\n\n    async buildTransaction({\n        transaction,\n        ...options\n    }: { transaction: Transaction } & BuildTransactionOptions) {\n        transaction.addBuildPlugin(this.cache.asPlugin());\n        return transaction.build({\n            client: this.#client,\n            ...options,\n        });\n    }\n\n    async executeTransaction({\n        transaction,\n        options,\n        ...input\n    }: {\n        transaction: Transaction | Uint8Array;\n    } & Omit<ExecuteTransactionBlockParams, 'transactionBlock'>) {\n        const bytes = isTransaction(transaction)\n            ? await this.buildTransaction({ transaction })\n            : transaction;\n\n        const results = await this.#client.executeTransactionBlock({\n            ...input,\n            transactionBlock: bytes,\n            options: {\n                ...options,\n                showRawEffects: true,\n            },\n        });\n\n        if (results.rawEffects) {\n            const effects = bcs.TransactionEffects.parse(Uint8Array.from(results.rawEffects));\n            await this.applyEffects(effects);\n        }\n\n        return results;\n    }\n\n    async signAndExecuteTransaction({\n        options,\n        transaction,\n        ...input\n    }: {\n        transaction: Transaction;\n\n        signer: Signer;\n    } & Omit<ExecuteTransactionBlockParams, 'transactionBlock' | 'signature'>) {\n        transaction.setSenderIfNotSet(input.signer.toIotaAddress());\n        const bytes = await this.buildTransaction({ transaction });\n        const { signature } = await input.signer.signTransaction(bytes);\n        const results = await this.executeTransaction({\n            transaction: bytes,\n            signature,\n            options,\n        });\n\n        return results;\n    }\n\n    async applyEffects(effects: typeof bcs.TransactionEffects.$inferType) {\n        this.#lastDigest = effects.V1?.transactionDigest ?? null;\n        await this.cache.applyEffects(effects);\n    }\n\n    async waitForLastTransaction() {\n        if (this.#lastDigest) {\n            await this.#client.waitForTransaction({ digest: this.#lastDigest });\n            this.#lastDigest = null;\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;AAAA;AAIA,SAAS,WAAW;AAKpB,SAAS,mBAAmB;AAE5B,SAAS,qBAAqB;AAEvB,MAAM,2BAA2B;AAAA,EAKpC,YAAY;AAAA,IACR;AAAA,IACA,GAAG;AAAA,EACP,GAEG;AATH;AACA,oCAA6B;AASzB,uBAAK,SAAU;AACf,SAAK,QAAQ,IAAI,YAAY,OAAO;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,QAAQ;AACV,UAAM,QAAQ,IAAI;AAAA,MACd,KAAK,MAAM,kBAAkB;AAAA,MAC7B,KAAK,MAAM,YAAY;AAAA,MACvB,KAAK,uBAAuB;AAAA,IAChC,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,iBAAiB;AAAA,IACnB;AAAA,IACA,GAAG;AAAA,EACP,GAA2D;AACvD,gBAAY,eAAe,KAAK,MAAM,SAAS,CAAC;AAChD,WAAO,YAAY,MAAM;AAAA,MACrB,QAAQ,mBAAK;AAAA,MACb,GAAG;AAAA,IACP,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,mBAAmB;AAAA,IACrB;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACP,GAE6D;AACzD,UAAM,QAAQ,cAAc,WAAW,IACjC,MAAM,KAAK,iBAAiB,EAAE,YAAY,CAAC,IAC3C;AAEN,UAAM,UAAU,MAAM,mBAAK,SAAQ,wBAAwB;AAAA,MACvD,GAAG;AAAA,MACH,kBAAkB;AAAA,MAClB,SAAS;AAAA,QACL,GAAG;AAAA,QACH,gBAAgB;AAAA,MACpB;AAAA,IACJ,CAAC;AAED,QAAI,QAAQ,YAAY;AACpB,YAAM,UAAU,IAAI,mBAAmB,MAAM,WAAW,KAAK,QAAQ,UAAU,CAAC;AAChF,YAAM,KAAK,aAAa,OAAO;AAAA,IACnC;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,0BAA0B;AAAA,IAC5B;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACP,GAI2E;AACvE,gBAAY,kBAAkB,MAAM,OAAO,cAAc,CAAC;AAC1D,UAAM,QAAQ,MAAM,KAAK,iBAAiB,EAAE,YAAY,CAAC;AACzD,UAAM,EAAE,UAAU,IAAI,MAAM,MAAM,OAAO,gBAAgB,KAAK;AAC9D,UAAM,UAAU,MAAM,KAAK,mBAAmB;AAAA,MAC1C,aAAa;AAAA,MACb;AAAA,MACA;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,aAAa,SAAmD;AAClE,uBAAK,aAAc,QAAQ,IAAI,qBAAqB;AACpD,UAAM,KAAK,MAAM,aAAa,OAAO;AAAA,EACzC;AAAA,EAEA,MAAM,yBAAyB;AAC3B,QAAI,mBAAK,cAAa;AAClB,YAAM,mBAAK,SAAQ,mBAAmB,EAAE,QAAQ,mBAAK,aAAY,CAAC;AAClE,yBAAK,aAAc;AAAA,IACvB;AAAA,EACJ;AACJ;AAjGI;AACA;",
  "names": []
}
