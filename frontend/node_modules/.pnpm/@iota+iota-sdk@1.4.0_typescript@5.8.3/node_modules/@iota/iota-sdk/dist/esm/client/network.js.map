{
  "version": 3,
  "sources": ["../../../src/client/network.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nexport enum Network {\n    Mainnet = 'mainnet',\n    Devnet = 'devnet',\n    Testnet = 'testnet',\n    Localnet = 'localnet',\n    Custom = 'custom',\n}\n\n// We also accept `string` in case we want to use a network not supported by the SDK\nexport type NetworkId = Network | string;\n\nexport type ChainType = `${string}:${string}`;\n\nexport interface NetworkConfiguration<Metadata = undefined> {\n    id: Network;\n    name: string;\n    url: string;\n    explorer: string;\n    chain: ChainType;\n    faucet?: string;\n    kiosk?: KioskConfiguration;\n    graphql?: string;\n    metadata?: Metadata;\n}\n\nexport interface KioskConfiguration {\n    royaltyRulePackageId: string;\n    kioskLockRulePackageId: string;\n    floorPriceRulePackageId: string;\n    personalKioskRulePackageId: string;\n}\n\ntype NetworksConfiguration = Record<NetworkId, NetworkConfiguration>;\n\nexport function getAllNetworks(): NetworksConfiguration {\n    const networksStringified = process.env.IOTA_NETWORKS;\n\n    if (!networksStringified) {\n        throw new Error('\"IOTA_NETWORKS\" env var is not set.');\n    }\n\n    let networks;\n\n    try {\n        networks = JSON.parse(networksStringified);\n    } catch {\n        throw new Error('Failed to parse env var \"IOTA_NETWORKS\".');\n    }\n\n    return networks;\n}\n\nexport function getNetwork<T>(network: NetworkId): NetworkConfiguration<T> {\n    const networks = getAllNetworks();\n\n    const requestedNetwork = (networks[network] ?? network) as NetworkConfiguration<T>;\n\n    return requestedNetwork;\n}\n\nexport function getDefaultNetwork(): Network {\n    return (process.env.DEFAULT_NETWORK as Network) || Network.Mainnet;\n}\n\nexport function getFullnodeUrl(network: NetworkId): string {\n    return getNetwork(network).url;\n}\n\nexport function getGraphQLUrl(network: NetworkId): string | undefined {\n    return getNetwork(network).graphql;\n}\n"],
  "mappings": "AAIO,IAAK,UAAL,kBAAKA,aAAL;AACH,EAAAA,SAAA,aAAU;AACV,EAAAA,SAAA,YAAS;AACT,EAAAA,SAAA,aAAU;AACV,EAAAA,SAAA,cAAW;AACX,EAAAA,SAAA,YAAS;AALD,SAAAA;AAAA,GAAA;AAkCL,SAAS,iBAAwC;AACpD,QAAM,sBAAsB;AAE5B,MAAI,CAAC,qBAAqB;AACtB,UAAM,IAAI,MAAM,qCAAqC;AAAA,EACzD;AAEA,MAAI;AAEJ,MAAI;AACA,eAAW,KAAK,MAAM,mBAAmB;AAAA,EAC7C,QAAQ;AACJ,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC9D;AAEA,SAAO;AACX;AAEO,SAAS,WAAc,SAA6C;AACvE,QAAM,WAAW,eAAe;AAEhC,QAAM,mBAAoB,SAAS,OAAO,KAAK;AAE/C,SAAO;AACX;AAEO,SAAS,oBAA6B;AACzC,SAAQ;AACZ;AAEO,SAAS,eAAe,SAA4B;AACvD,SAAO,WAAW,OAAO,EAAE;AAC/B;AAEO,SAAS,cAAc,SAAwC;AAClE,SAAO,WAAW,OAAO,EAAE;AAC/B;",
  "names": ["Network"]
}
