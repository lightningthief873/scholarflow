import { IntentMessage } from './bcs.js';
export type { TypeTag } from './types.js';
export { TypeTagSerializer } from './type-tag-serializer.js';
export { BcsType, type BcsTypeOptions } from '@iota/bcs';
declare const iotaBcs: {
    U8: import("@iota/bcs").BcsType<number, number>;
    U16: import("@iota/bcs").BcsType<number, number>;
    U32: import("@iota/bcs").BcsType<number, number>;
    U64: import("@iota/bcs").BcsType<string, string | number | bigint>;
    U128: import("@iota/bcs").BcsType<string, string | number | bigint>;
    U256: import("@iota/bcs").BcsType<string, string | number | bigint>;
    ULEB128: import("@iota/bcs").BcsType<number, number>;
    Bool: import("@iota/bcs").BcsType<boolean, boolean>;
    String: import("@iota/bcs").BcsType<string, string>;
    Address: import("@iota/bcs").BcsType<string, string | Uint8Array>;
    AppId: import("@iota/bcs").BcsType<{
        Iota: true;
        $kind: "Iota";
    }, {
        Iota: boolean | object | null;
    }>;
    Argument: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        GasCoin: true;
        Input: number;
        Result: number;
        NestedResult: [number, number];
    }, "GasCoin" | "Input" | "Result" | "NestedResult">, import("@iota/bcs").EnumInputShape<{
        GasCoin: boolean | object | null;
        Input: number;
        Result: number;
        NestedResult: readonly [number, number];
    }>>;
    CallArg: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        Pure: {
            bytes: string;
        };
        Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
            ImmOrOwnedObject: {
                objectId: string;
                version: string;
                digest: string;
            };
            SharedObject: {
                objectId: string;
                initialSharedVersion: string;
                mutable: boolean;
            };
            Receiving: {
                objectId: string;
                version: string;
                digest: string;
            };
        }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
    }, "Pure" | "Object">, import("@iota/bcs").EnumInputShape<{
        Pure: {
            bytes: string | Uint8Array;
        };
        Object: import("@iota/bcs").EnumInputShape<{
            ImmOrOwnedObject: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
            SharedObject: {
                objectId: string | Uint8Array;
                initialSharedVersion: string | number | bigint;
                mutable: boolean;
            };
            Receiving: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
        }>;
    }>>;
    CompressedSignature: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        ED25519: number[];
        Secp256k1: number[];
        Secp256r1: number[];
    }, "ED25519" | "Secp256k1" | "Secp256r1">, import("@iota/bcs").EnumInputShape<{
        ED25519: Iterable<number> & {
            length: number;
        };
        Secp256k1: Iterable<number> & {
            length: number;
        };
        Secp256r1: Iterable<number> & {
            length: number;
        };
    }>>;
    GasData: import("@iota/bcs").BcsType<{
        payment: {
            objectId: string;
            version: string;
            digest: string;
        }[];
        owner: string;
        price: string;
        budget: string;
    }, {
        payment: Iterable<{
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        }> & {
            length: number;
        };
        owner: string | Uint8Array;
        price: string | number | bigint;
        budget: string | number | bigint;
    }>;
    Intent: import("@iota/bcs").BcsType<{
        scope: import("@iota/bcs").EnumOutputShapeWithKeys<{
            TransactionData: true;
            TransactionEffects: true;
            CheckpointSummary: true;
            PersonalMessage: true;
        }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">;
        version: {
            V0: true;
            $kind: "V0";
        };
        appId: {
            Iota: true;
            $kind: "Iota";
        };
    }, {
        scope: import("@iota/bcs").EnumInputShape<{
            TransactionData: boolean | object | null;
            TransactionEffects: boolean | object | null;
            CheckpointSummary: boolean | object | null;
            PersonalMessage: boolean | object | null;
        }>;
        version: {
            V0: boolean | object | null;
        };
        appId: {
            Iota: boolean | object | null;
        };
    }>;
    IntentMessage: typeof IntentMessage;
    IntentScope: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        TransactionData: true;
        TransactionEffects: true;
        CheckpointSummary: true;
        PersonalMessage: true;
    }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">, import("@iota/bcs").EnumInputShape<{
        TransactionData: boolean | object | null;
        TransactionEffects: boolean | object | null;
        CheckpointSummary: boolean | object | null;
        PersonalMessage: boolean | object | null;
    }>>;
    IntentVersion: import("@iota/bcs").BcsType<{
        V0: true;
        $kind: "V0";
    }, {
        V0: boolean | object | null;
    }>;
    MultiSig: import("@iota/bcs").BcsType<{
        sigs: import("@iota/bcs").EnumOutputShapeWithKeys<{
            ED25519: number[];
            Secp256k1: number[];
            Secp256r1: number[];
        }, "ED25519" | "Secp256k1" | "Secp256r1">[];
        bitmap: number;
        multisig_pk: {
            pk_map: {
                pubKey: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    ED25519: number[];
                    Secp256k1: number[];
                    Secp256r1: number[];
                }, "ED25519" | "Secp256k1" | "Secp256r1">;
                weight: number;
            }[];
            threshold: number;
        };
    }, {
        sigs: Iterable<import("@iota/bcs").EnumInputShape<{
            ED25519: Iterable<number> & {
                length: number;
            };
            Secp256k1: Iterable<number> & {
                length: number;
            };
            Secp256r1: Iterable<number> & {
                length: number;
            };
        }>> & {
            length: number;
        };
        bitmap: number;
        multisig_pk: {
            pk_map: Iterable<{
                pubKey: import("@iota/bcs").EnumInputShape<{
                    ED25519: Iterable<number> & {
                        length: number;
                    };
                    Secp256k1: Iterable<number> & {
                        length: number;
                    };
                    Secp256r1: Iterable<number> & {
                        length: number;
                    };
                }>;
                weight: number;
            }> & {
                length: number;
            };
            threshold: number;
        };
    }>;
    MultiSigPkMap: import("@iota/bcs").BcsType<{
        pubKey: import("@iota/bcs").EnumOutputShapeWithKeys<{
            ED25519: number[];
            Secp256k1: number[];
            Secp256r1: number[];
        }, "ED25519" | "Secp256k1" | "Secp256r1">;
        weight: number;
    }, {
        pubKey: import("@iota/bcs").EnumInputShape<{
            ED25519: Iterable<number> & {
                length: number;
            };
            Secp256k1: Iterable<number> & {
                length: number;
            };
            Secp256r1: Iterable<number> & {
                length: number;
            };
        }>;
        weight: number;
    }>;
    MultiSigPublicKey: import("@iota/bcs").BcsType<{
        pk_map: {
            pubKey: import("@iota/bcs").EnumOutputShapeWithKeys<{
                ED25519: number[];
                Secp256k1: number[];
                Secp256r1: number[];
            }, "ED25519" | "Secp256k1" | "Secp256r1">;
            weight: number;
        }[];
        threshold: number;
    }, {
        pk_map: Iterable<{
            pubKey: import("@iota/bcs").EnumInputShape<{
                ED25519: Iterable<number> & {
                    length: number;
                };
                Secp256k1: Iterable<number> & {
                    length: number;
                };
                Secp256r1: Iterable<number> & {
                    length: number;
                };
            }>;
            weight: number;
        }> & {
            length: number;
        };
        threshold: number;
    }>;
    ObjectArg: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        ImmOrOwnedObject: {
            objectId: string;
            version: string;
            digest: string;
        };
        SharedObject: {
            objectId: string;
            initialSharedVersion: string;
            mutable: boolean;
        };
        Receiving: {
            objectId: string;
            version: string;
            digest: string;
        };
    }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">, import("@iota/bcs").EnumInputShape<{
        ImmOrOwnedObject: {
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        };
        SharedObject: {
            objectId: string | Uint8Array;
            initialSharedVersion: string | number | bigint;
            mutable: boolean;
        };
        Receiving: {
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        };
    }>>;
    ObjectDigest: import("@iota/bcs").BcsType<string, string>;
    Owner: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        AddressOwner: string;
        ObjectOwner: string;
        Shared: {
            initialSharedVersion: string;
        };
        Immutable: true;
    }, "AddressOwner" | "ObjectOwner" | "Shared" | "Immutable">, import("@iota/bcs").EnumInputShape<{
        AddressOwner: string | Uint8Array;
        ObjectOwner: string | Uint8Array;
        Shared: {
            initialSharedVersion: string | number | bigint;
        };
        Immutable: boolean | object | null;
    }>>;
    ProgrammableMoveCall: import("@iota/bcs").BcsType<{
        package: string;
        module: string;
        function: string;
        typeArguments: string[];
        arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
    }, {
        package: string | Uint8Array;
        module: string;
        function: string;
        typeArguments: Iterable<string | import("./types.js").TypeTag> & {
            length: number;
        };
        arguments: Iterable<import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>> & {
            length: number;
        };
    }>;
    ProgrammableTransaction: import("@iota/bcs").BcsType<{
        inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
            Pure: {
                bytes: string;
            };
            Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                ImmOrOwnedObject: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
                SharedObject: {
                    objectId: string;
                    initialSharedVersion: string;
                    mutable: boolean;
                };
                Receiving: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
            }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
        }, "Pure" | "Object">[];
        commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
            MoveCall: {
                package: string;
                module: string;
                function: string;
                typeArguments: string[];
                arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            TransferObjects: {
                objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            };
            SplitCoins: {
                coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            MergeCoins: {
                destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            Publish: {
                modules: string[];
                dependencies: string[];
            };
            MakeMoveVec: {
                type: string | null;
                elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            Upgrade: {
                modules: string[];
                dependencies: string[];
                package: string;
                ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            };
        }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
    }, {
        inputs: Iterable<import("@iota/bcs").EnumInputShape<{
            Pure: {
                bytes: string | Uint8Array;
            };
            Object: import("@iota/bcs").EnumInputShape<{
                ImmOrOwnedObject: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
                SharedObject: {
                    objectId: string | Uint8Array;
                    initialSharedVersion: string | number | bigint;
                    mutable: boolean;
                };
                Receiving: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
            }>;
        }>> & {
            length: number;
        };
        commands: Iterable<import("@iota/bcs").EnumInputShape<{
            MoveCall: {
                package: string | Uint8Array;
                module: string;
                function: string;
                typeArguments: Iterable<string | import("./types.js").TypeTag> & {
                    length: number;
                };
                arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            TransferObjects: {
                objects: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
                address: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
            };
            SplitCoins: {
                coin: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
                amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            MergeCoins: {
                destination: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
                sources: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            Publish: {
                modules: Iterable<string | Uint8Array> & {
                    length: number;
                };
                dependencies: Iterable<string | Uint8Array> & {
                    length: number;
                };
            };
            MakeMoveVec: {
                type: string | null;
                elements: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            Upgrade: {
                modules: Iterable<string | Uint8Array> & {
                    length: number;
                };
                dependencies: Iterable<string | Uint8Array> & {
                    length: number;
                };
                package: string | Uint8Array;
                ticket: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
            };
        }>> & {
            length: number;
        };
    }>;
    PublicKey: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        ED25519: number[];
        Secp256k1: number[];
        Secp256r1: number[];
    }, "ED25519" | "Secp256k1" | "Secp256r1">, import("@iota/bcs").EnumInputShape<{
        ED25519: Iterable<number> & {
            length: number;
        };
        Secp256k1: Iterable<number> & {
            length: number;
        };
        Secp256r1: Iterable<number> & {
            length: number;
        };
    }>>;
    SenderSignedData: import("@iota/bcs").BcsType<{
        intentMessage: {
            intent: {
                scope: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    TransactionData: true;
                    TransactionEffects: true;
                    CheckpointSummary: true;
                    PersonalMessage: true;
                }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">;
                version: {
                    V0: true;
                    $kind: "V0";
                };
                appId: {
                    Iota: true;
                    $kind: "Iota";
                };
            };
            value: {
                V1: {
                    kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        ProgrammableTransaction: {
                            inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                Pure: {
                                    bytes: string;
                                };
                                Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    ImmOrOwnedObject: {
                                        objectId: string;
                                        version: string;
                                        digest: string;
                                    };
                                    SharedObject: {
                                        objectId: string;
                                        initialSharedVersion: string;
                                        mutable: boolean;
                                    };
                                    Receiving: {
                                        objectId: string;
                                        version: string;
                                        digest: string;
                                    };
                                }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
                            }, "Pure" | "Object">[];
                            commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                MoveCall: {
                                    package: string;
                                    module: string;
                                    function: string;
                                    typeArguments: string[];
                                    arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                TransferObjects: {
                                    objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                    address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                };
                                SplitCoins: {
                                    coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                    amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                MergeCoins: {
                                    destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                    sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                Publish: {
                                    modules: string[];
                                    dependencies: string[];
                                };
                                MakeMoveVec: {
                                    type: string | null;
                                    elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                Upgrade: {
                                    modules: string[];
                                    dependencies: string[];
                                    package: string;
                                    ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                };
                            }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
                        };
                        ChangeEpoch: true;
                        Genesis: true;
                        ConsensusCommitPrologue: true;
                    }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
                    sender: string;
                    gasData: {
                        payment: {
                            objectId: string;
                            version: string;
                            digest: string;
                        }[];
                        owner: string;
                        price: string;
                        budget: string;
                    };
                    expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        None: true;
                        Epoch: number;
                    }, "None" | "Epoch">;
                };
                $kind: "V1";
            };
        };
        txSignatures: string[];
    }[], Iterable<{
        intentMessage: {
            intent: {
                scope: import("@iota/bcs").EnumInputShape<{
                    TransactionData: boolean | object | null;
                    TransactionEffects: boolean | object | null;
                    CheckpointSummary: boolean | object | null;
                    PersonalMessage: boolean | object | null;
                }>;
                version: {
                    V0: boolean | object | null;
                };
                appId: {
                    Iota: boolean | object | null;
                };
            };
            value: {
                V1: {
                    kind: import("@iota/bcs").EnumInputShape<{
                        ProgrammableTransaction: {
                            inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                                Pure: {
                                    bytes: string | Uint8Array;
                                };
                                Object: import("@iota/bcs").EnumInputShape<{
                                    ImmOrOwnedObject: {
                                        objectId: string | Uint8Array;
                                        version: string | number | bigint;
                                        digest: string;
                                    };
                                    SharedObject: {
                                        objectId: string | Uint8Array;
                                        initialSharedVersion: string | number | bigint;
                                        mutable: boolean;
                                    };
                                    Receiving: {
                                        objectId: string | Uint8Array;
                                        version: string | number | bigint;
                                        digest: string;
                                    };
                                }>;
                            }>> & {
                                length: number;
                            };
                            commands: Iterable<import("@iota/bcs").EnumInputShape<{
                                MoveCall: {
                                    package: string | Uint8Array;
                                    module: string;
                                    function: string;
                                    typeArguments: Iterable<string | import("./types.js").TypeTag> & {
                                        length: number;
                                    };
                                    arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                TransferObjects: {
                                    objects: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                    address: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                };
                                SplitCoins: {
                                    coin: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                    amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                MergeCoins: {
                                    destination: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                    sources: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                Publish: {
                                    modules: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                    dependencies: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                };
                                MakeMoveVec: {
                                    type: string | null;
                                    elements: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                Upgrade: {
                                    modules: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                    dependencies: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                    package: string | Uint8Array;
                                    ticket: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                };
                            }>> & {
                                length: number;
                            };
                        };
                        ChangeEpoch: boolean | object | null;
                        Genesis: boolean | object | null;
                        ConsensusCommitPrologue: boolean | object | null;
                    }>;
                    sender: string | Uint8Array;
                    gasData: {
                        payment: Iterable<{
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        }> & {
                            length: number;
                        };
                        owner: string | Uint8Array;
                        price: string | number | bigint;
                        budget: string | number | bigint;
                    };
                    expiration: import("@iota/bcs").EnumInputShape<{
                        None: boolean | object | null;
                        Epoch: string | number;
                    }>;
                };
            };
        };
        txSignatures: Iterable<string | Uint8Array> & {
            length: number;
        };
    }> & {
        length: number;
    }>;
    SenderSignedTransaction: import("@iota/bcs").BcsType<{
        intentMessage: {
            intent: {
                scope: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    TransactionData: true;
                    TransactionEffects: true;
                    CheckpointSummary: true;
                    PersonalMessage: true;
                }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">;
                version: {
                    V0: true;
                    $kind: "V0";
                };
                appId: {
                    Iota: true;
                    $kind: "Iota";
                };
            };
            value: {
                V1: {
                    kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        ProgrammableTransaction: {
                            inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                Pure: {
                                    bytes: string;
                                };
                                Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    ImmOrOwnedObject: {
                                        objectId: string;
                                        version: string;
                                        digest: string;
                                    };
                                    SharedObject: {
                                        objectId: string;
                                        initialSharedVersion: string;
                                        mutable: boolean;
                                    };
                                    Receiving: {
                                        objectId: string;
                                        version: string;
                                        digest: string;
                                    };
                                }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
                            }, "Pure" | "Object">[];
                            commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                MoveCall: {
                                    package: string;
                                    module: string;
                                    function: string;
                                    typeArguments: string[];
                                    arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                TransferObjects: {
                                    objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                    address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                };
                                SplitCoins: {
                                    coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                    amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                MergeCoins: {
                                    destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                    sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                Publish: {
                                    modules: string[];
                                    dependencies: string[];
                                };
                                MakeMoveVec: {
                                    type: string | null;
                                    elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                };
                                Upgrade: {
                                    modules: string[];
                                    dependencies: string[];
                                    package: string;
                                    ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                        GasCoin: true;
                                        Input: number;
                                        Result: number;
                                        NestedResult: [number, number];
                                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                };
                            }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
                        };
                        ChangeEpoch: true;
                        Genesis: true;
                        ConsensusCommitPrologue: true;
                    }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
                    sender: string;
                    gasData: {
                        payment: {
                            objectId: string;
                            version: string;
                            digest: string;
                        }[];
                        owner: string;
                        price: string;
                        budget: string;
                    };
                    expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        None: true;
                        Epoch: number;
                    }, "None" | "Epoch">;
                };
                $kind: "V1";
            };
        };
        txSignatures: string[];
    }, {
        intentMessage: {
            intent: {
                scope: import("@iota/bcs").EnumInputShape<{
                    TransactionData: boolean | object | null;
                    TransactionEffects: boolean | object | null;
                    CheckpointSummary: boolean | object | null;
                    PersonalMessage: boolean | object | null;
                }>;
                version: {
                    V0: boolean | object | null;
                };
                appId: {
                    Iota: boolean | object | null;
                };
            };
            value: {
                V1: {
                    kind: import("@iota/bcs").EnumInputShape<{
                        ProgrammableTransaction: {
                            inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                                Pure: {
                                    bytes: string | Uint8Array;
                                };
                                Object: import("@iota/bcs").EnumInputShape<{
                                    ImmOrOwnedObject: {
                                        objectId: string | Uint8Array;
                                        version: string | number | bigint;
                                        digest: string;
                                    };
                                    SharedObject: {
                                        objectId: string | Uint8Array;
                                        initialSharedVersion: string | number | bigint;
                                        mutable: boolean;
                                    };
                                    Receiving: {
                                        objectId: string | Uint8Array;
                                        version: string | number | bigint;
                                        digest: string;
                                    };
                                }>;
                            }>> & {
                                length: number;
                            };
                            commands: Iterable<import("@iota/bcs").EnumInputShape<{
                                MoveCall: {
                                    package: string | Uint8Array;
                                    module: string;
                                    function: string;
                                    typeArguments: Iterable<string | import("./types.js").TypeTag> & {
                                        length: number;
                                    };
                                    arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                TransferObjects: {
                                    objects: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                    address: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                };
                                SplitCoins: {
                                    coin: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                    amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                MergeCoins: {
                                    destination: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                    sources: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                Publish: {
                                    modules: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                    dependencies: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                };
                                MakeMoveVec: {
                                    type: string | null;
                                    elements: Iterable<import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>> & {
                                        length: number;
                                    };
                                };
                                Upgrade: {
                                    modules: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                    dependencies: Iterable<string | Uint8Array> & {
                                        length: number;
                                    };
                                    package: string | Uint8Array;
                                    ticket: import("@iota/bcs").EnumInputShape<{
                                        GasCoin: boolean | object | null;
                                        Input: number;
                                        Result: number;
                                        NestedResult: readonly [number, number];
                                    }>;
                                };
                            }>> & {
                                length: number;
                            };
                        };
                        ChangeEpoch: boolean | object | null;
                        Genesis: boolean | object | null;
                        ConsensusCommitPrologue: boolean | object | null;
                    }>;
                    sender: string | Uint8Array;
                    gasData: {
                        payment: Iterable<{
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        }> & {
                            length: number;
                        };
                        owner: string | Uint8Array;
                        price: string | number | bigint;
                        budget: string | number | bigint;
                    };
                    expiration: import("@iota/bcs").EnumInputShape<{
                        None: boolean | object | null;
                        Epoch: string | number;
                    }>;
                };
            };
        };
        txSignatures: Iterable<string | Uint8Array> & {
            length: number;
        };
    }>;
    SharedObjectRef: import("@iota/bcs").BcsType<{
        objectId: string;
        initialSharedVersion: string;
        mutable: boolean;
    }, {
        objectId: string | Uint8Array;
        initialSharedVersion: string | number | bigint;
        mutable: boolean;
    }>;
    StructTag: import("@iota/bcs").BcsType<{
        address: string;
        module: string;
        name: string;
        typeParams: import("./types.js").TypeTag[];
    }, {
        address: string | Uint8Array;
        module: string;
        name: string;
        typeParams: Iterable<import("./types.js").TypeTag> & {
            length: number;
        };
    }>;
    IotaObjectRef: import("@iota/bcs").BcsType<{
        objectId: string;
        version: string;
        digest: string;
    }, {
        objectId: string | Uint8Array;
        version: string | number | bigint;
        digest: string;
    }>;
    Command: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        MoveCall: {
            package: string;
            module: string;
            function: string;
            typeArguments: string[];
            arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        TransferObjects: {
            objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
        };
        SplitCoins: {
            coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        MergeCoins: {
            destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        Publish: {
            modules: string[];
            dependencies: string[];
        };
        MakeMoveVec: {
            type: string | null;
            elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        Upgrade: {
            modules: string[];
            dependencies: string[];
            package: string;
            ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
        };
    }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">, import("@iota/bcs").EnumInputShape<{
        MoveCall: {
            package: string | Uint8Array;
            module: string;
            function: string;
            typeArguments: Iterable<string | import("./types.js").TypeTag> & {
                length: number;
            };
            arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        TransferObjects: {
            objects: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
            address: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
        };
        SplitCoins: {
            coin: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
            amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        MergeCoins: {
            destination: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
            sources: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        Publish: {
            modules: Iterable<string | Uint8Array> & {
                length: number;
            };
            dependencies: Iterable<string | Uint8Array> & {
                length: number;
            };
        };
        MakeMoveVec: {
            type: string | null;
            elements: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        Upgrade: {
            modules: Iterable<string | Uint8Array> & {
                length: number;
            };
            dependencies: Iterable<string | Uint8Array> & {
                length: number;
            };
            package: string | Uint8Array;
            ticket: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
        };
    }>>;
    TransactionData: import("@iota/bcs").BcsType<{
        V1: {
            kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                ProgrammableTransaction: {
                    inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        Pure: {
                            bytes: string;
                        };
                        Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            ImmOrOwnedObject: {
                                objectId: string;
                                version: string;
                                digest: string;
                            };
                            SharedObject: {
                                objectId: string;
                                initialSharedVersion: string;
                                mutable: boolean;
                            };
                            Receiving: {
                                objectId: string;
                                version: string;
                                digest: string;
                            };
                        }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
                    }, "Pure" | "Object">[];
                    commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        MoveCall: {
                            package: string;
                            module: string;
                            function: string;
                            typeArguments: string[];
                            arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                        };
                        TransferObjects: {
                            objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                        };
                        SplitCoins: {
                            coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                            amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                        };
                        MergeCoins: {
                            destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                            sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                        };
                        Publish: {
                            modules: string[];
                            dependencies: string[];
                        };
                        MakeMoveVec: {
                            type: string | null;
                            elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                        };
                        Upgrade: {
                            modules: string[];
                            dependencies: string[];
                            package: string;
                            ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                GasCoin: true;
                                Input: number;
                                Result: number;
                                NestedResult: [number, number];
                            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                        };
                    }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
                };
                ChangeEpoch: true;
                Genesis: true;
                ConsensusCommitPrologue: true;
            }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
            sender: string;
            gasData: {
                payment: {
                    objectId: string;
                    version: string;
                    digest: string;
                }[];
                owner: string;
                price: string;
                budget: string;
            };
            expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
                None: true;
                Epoch: number;
            }, "None" | "Epoch">;
        };
        $kind: "V1";
    }, {
        V1: {
            kind: import("@iota/bcs").EnumInputShape<{
                ProgrammableTransaction: {
                    inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                        Pure: {
                            bytes: string | Uint8Array;
                        };
                        Object: import("@iota/bcs").EnumInputShape<{
                            ImmOrOwnedObject: {
                                objectId: string | Uint8Array;
                                version: string | number | bigint;
                                digest: string;
                            };
                            SharedObject: {
                                objectId: string | Uint8Array;
                                initialSharedVersion: string | number | bigint;
                                mutable: boolean;
                            };
                            Receiving: {
                                objectId: string | Uint8Array;
                                version: string | number | bigint;
                                digest: string;
                            };
                        }>;
                    }>> & {
                        length: number;
                    };
                    commands: Iterable<import("@iota/bcs").EnumInputShape<{
                        MoveCall: {
                            package: string | Uint8Array;
                            module: string;
                            function: string;
                            typeArguments: Iterable<string | import("./types.js").TypeTag> & {
                                length: number;
                            };
                            arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>> & {
                                length: number;
                            };
                        };
                        TransferObjects: {
                            objects: Iterable<import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>> & {
                                length: number;
                            };
                            address: import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>;
                        };
                        SplitCoins: {
                            coin: import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>;
                            amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>> & {
                                length: number;
                            };
                        };
                        MergeCoins: {
                            destination: import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>;
                            sources: Iterable<import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>> & {
                                length: number;
                            };
                        };
                        Publish: {
                            modules: Iterable<string | Uint8Array> & {
                                length: number;
                            };
                            dependencies: Iterable<string | Uint8Array> & {
                                length: number;
                            };
                        };
                        MakeMoveVec: {
                            type: string | null;
                            elements: Iterable<import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>> & {
                                length: number;
                            };
                        };
                        Upgrade: {
                            modules: Iterable<string | Uint8Array> & {
                                length: number;
                            };
                            dependencies: Iterable<string | Uint8Array> & {
                                length: number;
                            };
                            package: string | Uint8Array;
                            ticket: import("@iota/bcs").EnumInputShape<{
                                GasCoin: boolean | object | null;
                                Input: number;
                                Result: number;
                                NestedResult: readonly [number, number];
                            }>;
                        };
                    }>> & {
                        length: number;
                    };
                };
                ChangeEpoch: boolean | object | null;
                Genesis: boolean | object | null;
                ConsensusCommitPrologue: boolean | object | null;
            }>;
            sender: string | Uint8Array;
            gasData: {
                payment: Iterable<{
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                }> & {
                    length: number;
                };
                owner: string | Uint8Array;
                price: string | number | bigint;
                budget: string | number | bigint;
            };
            expiration: import("@iota/bcs").EnumInputShape<{
                None: boolean | object | null;
                Epoch: string | number;
            }>;
        };
    }>;
    TransactionDataV1: import("@iota/bcs").BcsType<{
        kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
            ProgrammableTransaction: {
                inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    Pure: {
                        bytes: string;
                    };
                    Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        ImmOrOwnedObject: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                        SharedObject: {
                            objectId: string;
                            initialSharedVersion: string;
                            mutable: boolean;
                        };
                        Receiving: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                    }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
                }, "Pure" | "Object">[];
                commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    MoveCall: {
                        package: string;
                        module: string;
                        function: string;
                        typeArguments: string[];
                        arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    TransferObjects: {
                        objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                        address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    };
                    SplitCoins: {
                        coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                        amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    MergeCoins: {
                        destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                        sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    Publish: {
                        modules: string[];
                        dependencies: string[];
                    };
                    MakeMoveVec: {
                        type: string | null;
                        elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    Upgrade: {
                        modules: string[];
                        dependencies: string[];
                        package: string;
                        ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    };
                }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
            };
            ChangeEpoch: true;
            Genesis: true;
            ConsensusCommitPrologue: true;
        }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
        sender: string;
        gasData: {
            payment: {
                objectId: string;
                version: string;
                digest: string;
            }[];
            owner: string;
            price: string;
            budget: string;
        };
        expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
            None: true;
            Epoch: number;
        }, "None" | "Epoch">;
    }, {
        kind: import("@iota/bcs").EnumInputShape<{
            ProgrammableTransaction: {
                inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                    Pure: {
                        bytes: string | Uint8Array;
                    };
                    Object: import("@iota/bcs").EnumInputShape<{
                        ImmOrOwnedObject: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                        SharedObject: {
                            objectId: string | Uint8Array;
                            initialSharedVersion: string | number | bigint;
                            mutable: boolean;
                        };
                        Receiving: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                    }>;
                }>> & {
                    length: number;
                };
                commands: Iterable<import("@iota/bcs").EnumInputShape<{
                    MoveCall: {
                        package: string | Uint8Array;
                        module: string;
                        function: string;
                        typeArguments: Iterable<string | import("./types.js").TypeTag> & {
                            length: number;
                        };
                        arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    TransferObjects: {
                        objects: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                        address: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                    };
                    SplitCoins: {
                        coin: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                        amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    MergeCoins: {
                        destination: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                        sources: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    Publish: {
                        modules: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        dependencies: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                    };
                    MakeMoveVec: {
                        type: string | null;
                        elements: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    Upgrade: {
                        modules: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        dependencies: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        package: string | Uint8Array;
                        ticket: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                    };
                }>> & {
                    length: number;
                };
            };
            ChangeEpoch: boolean | object | null;
            Genesis: boolean | object | null;
            ConsensusCommitPrologue: boolean | object | null;
        }>;
        sender: string | Uint8Array;
        gasData: {
            payment: Iterable<{
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            }> & {
                length: number;
            };
            owner: string | Uint8Array;
            price: string | number | bigint;
            budget: string | number | bigint;
        };
        expiration: import("@iota/bcs").EnumInputShape<{
            None: boolean | object | null;
            Epoch: string | number;
        }>;
    }>;
    TransactionExpiration: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        None: true;
        Epoch: number;
    }, "None" | "Epoch">, import("@iota/bcs").EnumInputShape<{
        None: boolean | object | null;
        Epoch: string | number;
    }>>;
    TransactionKind: import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
        ProgrammableTransaction: {
            inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                Pure: {
                    bytes: string;
                };
                Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    ImmOrOwnedObject: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                    SharedObject: {
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    };
                    Receiving: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
            }, "Pure" | "Object">[];
            commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                MoveCall: {
                    package: string;
                    module: string;
                    function: string;
                    typeArguments: string[];
                    arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                TransferObjects: {
                    objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                };
                SplitCoins: {
                    coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                MergeCoins: {
                    destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                Publish: {
                    modules: string[];
                    dependencies: string[];
                };
                MakeMoveVec: {
                    type: string | null;
                    elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                Upgrade: {
                    modules: string[];
                    dependencies: string[];
                    package: string;
                    ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                };
            }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
        };
        ChangeEpoch: true;
        Genesis: true;
        ConsensusCommitPrologue: true;
    }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">, import("@iota/bcs").EnumInputShape<{
        ProgrammableTransaction: {
            inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                Pure: {
                    bytes: string | Uint8Array;
                };
                Object: import("@iota/bcs").EnumInputShape<{
                    ImmOrOwnedObject: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                    SharedObject: {
                        objectId: string | Uint8Array;
                        initialSharedVersion: string | number | bigint;
                        mutable: boolean;
                    };
                    Receiving: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                }>;
            }>> & {
                length: number;
            };
            commands: Iterable<import("@iota/bcs").EnumInputShape<{
                MoveCall: {
                    package: string | Uint8Array;
                    module: string;
                    function: string;
                    typeArguments: Iterable<string | import("./types.js").TypeTag> & {
                        length: number;
                    };
                    arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                TransferObjects: {
                    objects: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                    address: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                };
                SplitCoins: {
                    coin: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                    amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                MergeCoins: {
                    destination: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                    sources: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                Publish: {
                    modules: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    dependencies: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                };
                MakeMoveVec: {
                    type: string | null;
                    elements: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                Upgrade: {
                    modules: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    dependencies: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    package: string | Uint8Array;
                    ticket: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                };
            }>> & {
                length: number;
            };
        };
        ChangeEpoch: boolean | object | null;
        Genesis: boolean | object | null;
        ConsensusCommitPrologue: boolean | object | null;
    }>>;
    TypeTag: import("@iota/bcs").BcsType<string, string | import("./types.js").TypeTag>;
    TransactionEffects: import("@iota/bcs").BcsType<{
        V1: {
            status: import("@iota/bcs").EnumOutputShapeWithKeys<{
                Success: true;
                Failed: {
                    error: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        InsufficientGas: true;
                        InvalidGasObject: true;
                        InvariantViolation: true;
                        FeatureNotYetSupported: true;
                        MoveObjectTooBig: {
                            objectSize: string;
                            maxObjectSize: string;
                        };
                        MovePackageTooBig: {
                            objectSize: string;
                            maxObjectSize: string;
                        };
                        CircularObjectOwnership: {
                            object: string;
                        };
                        InsufficientCoinBalance: true;
                        CoinBalanceOverflow: true;
                        PublishErrorNonZeroAddress: true;
                        IotaMoveVerificationError: true;
                        MovePrimitiveRuntimeError: {
                            module: {
                                address: string;
                                name: string;
                            };
                            function: number;
                            instruction: number;
                            functionName: string | null;
                        } | null;
                        MoveAbort: [{
                            module: {
                                address: string;
                                name: string;
                            };
                            function: number;
                            instruction: number;
                            functionName: string | null;
                        }, string];
                        VMVerificationOrDeserializationError: true;
                        VMInvariantViolation: true;
                        FunctionNotFound: true;
                        ArityMismatch: true;
                        TypeArityMismatch: true;
                        NonEntryFunctionInvoked: true;
                        CommandArgumentError: {
                            argIdx: number;
                            kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                TypeMismatch: true;
                                InvalidBCSBytes: true;
                                InvalidUsageOfPureArg: true;
                                InvalidArgumentToPrivateEntryFunction: true;
                                IndexOutOfBounds: {
                                    idx: number;
                                };
                                SecondaryIndexOutOfBounds: {
                                    resultIdx: number;
                                    secondaryIdx: number;
                                };
                                InvalidResultArity: {
                                    resultIdx: number;
                                };
                                InvalidGasCoinUsage: true;
                                InvalidValueUsage: true;
                                InvalidObjectByValue: true;
                                InvalidObjectByMutRef: true;
                                SharedObjectOperationNotAllowed: true;
                            }, "TypeMismatch" | "InvalidBCSBytes" | "InvalidUsageOfPureArg" | "InvalidArgumentToPrivateEntryFunction" | "IndexOutOfBounds" | "SecondaryIndexOutOfBounds" | "InvalidResultArity" | "InvalidGasCoinUsage" | "InvalidValueUsage" | "InvalidObjectByValue" | "InvalidObjectByMutRef" | "SharedObjectOperationNotAllowed">;
                        };
                        TypeArgumentError: {
                            argumentIdx: number;
                            kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                TypeNotFound: true;
                                ConstraintNotSatisfied: true;
                            }, "TypeNotFound" | "ConstraintNotSatisfied">;
                        };
                        UnusedValueWithoutDrop: {
                            resultIdx: number;
                            secondaryIdx: number;
                        };
                        InvalidPublicFunctionReturnType: {
                            idx: number;
                        };
                        InvalidTransferObject: true;
                        EffectsTooLarge: {
                            currentSize: string;
                            maxSize: string;
                        };
                        PublishUpgradeMissingDependency: true;
                        PublishUpgradeDependencyDowngrade: true;
                        PackageUpgradeError: {
                            upgradeError: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                UnableToFetchPackage: {
                                    packageId: string;
                                };
                                NotAPackage: {
                                    objectId: string;
                                };
                                IncompatibleUpgrade: true;
                                DigestDoesNotMatch: {
                                    digest: number[];
                                };
                                UnknownUpgradePolicy: {
                                    policy: number;
                                };
                                PackageIDDoesNotMatch: {
                                    packageId: string;
                                    ticketId: string;
                                };
                            }, "UnableToFetchPackage" | "NotAPackage" | "IncompatibleUpgrade" | "DigestDoesNotMatch" | "UnknownUpgradePolicy" | "PackageIDDoesNotMatch">;
                        };
                        WrittenObjectsTooLarge: {
                            currentSize: string;
                            maxSize: string;
                        };
                        CertificateDenied: true;
                        IotaMoveVerificationTimedout: true;
                        SharedObjectOperationNotAllowed: true;
                        InputObjectDeleted: true;
                    }, "PackageUpgradeError" | "SharedObjectOperationNotAllowed" | "CommandArgumentError" | "TypeArgumentError" | "InsufficientGas" | "InvalidGasObject" | "InvariantViolation" | "FeatureNotYetSupported" | "MoveObjectTooBig" | "MovePackageTooBig" | "CircularObjectOwnership" | "InsufficientCoinBalance" | "CoinBalanceOverflow" | "PublishErrorNonZeroAddress" | "IotaMoveVerificationError" | "MovePrimitiveRuntimeError" | "MoveAbort" | "VMVerificationOrDeserializationError" | "VMInvariantViolation" | "FunctionNotFound" | "ArityMismatch" | "TypeArityMismatch" | "NonEntryFunctionInvoked" | "UnusedValueWithoutDrop" | "InvalidPublicFunctionReturnType" | "InvalidTransferObject" | "EffectsTooLarge" | "PublishUpgradeMissingDependency" | "PublishUpgradeDependencyDowngrade" | "WrittenObjectsTooLarge" | "CertificateDenied" | "IotaMoveVerificationTimedout" | "InputObjectDeleted">;
                    command: string | null;
                };
            }, "Success" | "Failed">;
            executedEpoch: string;
            gasUsed: {
                computationCost: string;
                computationCostBurned: string;
                storageCost: string;
                storageRebate: string;
                nonRefundableStorageFee: string;
            };
            transactionDigest: string;
            gasObjectIndex: number | null;
            eventsDigest: string | null;
            dependencies: string[];
            lamportVersion: string;
            changedObjects: [string, {
                inputState: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    NotExist: true;
                    Exist: [[string, string], import("@iota/bcs").EnumOutputShapeWithKeys<{
                        AddressOwner: string;
                        ObjectOwner: string;
                        Shared: {
                            initialSharedVersion: string;
                        };
                        Immutable: true;
                    }, "AddressOwner" | "ObjectOwner" | "Shared" | "Immutable">];
                }, "NotExist" | "Exist">;
                outputState: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    NotExist: true;
                    ObjectWrite: [string, import("@iota/bcs").EnumOutputShapeWithKeys<{
                        AddressOwner: string;
                        ObjectOwner: string;
                        Shared: {
                            initialSharedVersion: string;
                        };
                        Immutable: true;
                    }, "AddressOwner" | "ObjectOwner" | "Shared" | "Immutable">];
                    PackageWrite: [string, string];
                }, "NotExist" | "ObjectWrite" | "PackageWrite">;
                idOperation: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    None: true;
                    Created: true;
                    Deleted: true;
                }, "None" | "Created" | "Deleted">;
            }][];
            unchangedSharedObjects: [string, import("@iota/bcs").EnumOutputShapeWithKeys<{
                ReadOnlyRoot: [string, string];
                MutateDeleted: string;
                ReadDeleted: string;
                Cancelled: string;
                PerEpochConfig: true;
            }, "ReadOnlyRoot" | "MutateDeleted" | "ReadDeleted" | "Cancelled" | "PerEpochConfig">][];
            auxDataDigest: string | null;
        };
        $kind: "V1";
    }, {
        V1: {
            status: import("@iota/bcs").EnumInputShape<{
                Success: boolean | object | null;
                Failed: {
                    error: import("@iota/bcs").EnumInputShape<{
                        InsufficientGas: boolean | object | null;
                        InvalidGasObject: boolean | object | null;
                        InvariantViolation: boolean | object | null;
                        FeatureNotYetSupported: boolean | object | null;
                        MoveObjectTooBig: {
                            objectSize: string | number | bigint;
                            maxObjectSize: string | number | bigint;
                        };
                        MovePackageTooBig: {
                            objectSize: string | number | bigint;
                            maxObjectSize: string | number | bigint;
                        };
                        CircularObjectOwnership: {
                            object: string | Uint8Array;
                        };
                        InsufficientCoinBalance: boolean | object | null;
                        CoinBalanceOverflow: boolean | object | null;
                        PublishErrorNonZeroAddress: boolean | object | null;
                        IotaMoveVerificationError: boolean | object | null;
                        MovePrimitiveRuntimeError: {
                            module: {
                                address: string | Uint8Array;
                                name: string;
                            };
                            function: number;
                            instruction: number;
                            functionName: string | null | undefined;
                        } | null | undefined;
                        MoveAbort: readonly [{
                            module: {
                                address: string | Uint8Array;
                                name: string;
                            };
                            function: number;
                            instruction: number;
                            functionName: string | null | undefined;
                        }, string | number | bigint];
                        VMVerificationOrDeserializationError: boolean | object | null;
                        VMInvariantViolation: boolean | object | null;
                        FunctionNotFound: boolean | object | null;
                        ArityMismatch: boolean | object | null;
                        TypeArityMismatch: boolean | object | null;
                        NonEntryFunctionInvoked: boolean | object | null;
                        CommandArgumentError: {
                            argIdx: number;
                            kind: import("@iota/bcs").EnumInputShape<{
                                TypeMismatch: boolean | object | null;
                                InvalidBCSBytes: boolean | object | null;
                                InvalidUsageOfPureArg: boolean | object | null;
                                InvalidArgumentToPrivateEntryFunction: boolean | object | null;
                                IndexOutOfBounds: {
                                    idx: number;
                                };
                                SecondaryIndexOutOfBounds: {
                                    resultIdx: number;
                                    secondaryIdx: number;
                                };
                                InvalidResultArity: {
                                    resultIdx: number;
                                };
                                InvalidGasCoinUsage: boolean | object | null;
                                InvalidValueUsage: boolean | object | null;
                                InvalidObjectByValue: boolean | object | null;
                                InvalidObjectByMutRef: boolean | object | null;
                                SharedObjectOperationNotAllowed: boolean | object | null;
                            }>;
                        };
                        TypeArgumentError: {
                            argumentIdx: number;
                            kind: import("@iota/bcs").EnumInputShape<{
                                TypeNotFound: boolean | object | null;
                                ConstraintNotSatisfied: boolean | object | null;
                            }>;
                        };
                        UnusedValueWithoutDrop: {
                            resultIdx: number;
                            secondaryIdx: number;
                        };
                        InvalidPublicFunctionReturnType: {
                            idx: number;
                        };
                        InvalidTransferObject: boolean | object | null;
                        EffectsTooLarge: {
                            currentSize: string | number | bigint;
                            maxSize: string | number | bigint;
                        };
                        PublishUpgradeMissingDependency: boolean | object | null;
                        PublishUpgradeDependencyDowngrade: boolean | object | null;
                        PackageUpgradeError: {
                            upgradeError: import("@iota/bcs").EnumInputShape<{
                                UnableToFetchPackage: {
                                    packageId: string | Uint8Array;
                                };
                                NotAPackage: {
                                    objectId: string | Uint8Array;
                                };
                                IncompatibleUpgrade: boolean | object | null;
                                DigestDoesNotMatch: {
                                    digest: Iterable<number> & {
                                        length: number;
                                    };
                                };
                                UnknownUpgradePolicy: {
                                    policy: number;
                                };
                                PackageIDDoesNotMatch: {
                                    packageId: string | Uint8Array;
                                    ticketId: string | Uint8Array;
                                };
                            }>;
                        };
                        WrittenObjectsTooLarge: {
                            currentSize: string | number | bigint;
                            maxSize: string | number | bigint;
                        };
                        CertificateDenied: boolean | object | null;
                        IotaMoveVerificationTimedout: boolean | object | null;
                        SharedObjectOperationNotAllowed: boolean | object | null;
                        InputObjectDeleted: boolean | object | null;
                    }>;
                    command: string | number | bigint | null | undefined;
                };
            }>;
            executedEpoch: string | number | bigint;
            gasUsed: {
                computationCost: string | number | bigint;
                computationCostBurned: string | number | bigint;
                storageCost: string | number | bigint;
                storageRebate: string | number | bigint;
                nonRefundableStorageFee: string | number | bigint;
            };
            transactionDigest: string;
            gasObjectIndex: number | null | undefined;
            eventsDigest: string | null | undefined;
            dependencies: Iterable<string> & {
                length: number;
            };
            lamportVersion: string | number | bigint;
            changedObjects: Iterable<readonly [string | Uint8Array, {
                inputState: import("@iota/bcs").EnumInputShape<{
                    NotExist: boolean | object | null;
                    Exist: readonly [readonly [string | number | bigint, string], import("@iota/bcs").EnumInputShape<{
                        AddressOwner: string | Uint8Array;
                        ObjectOwner: string | Uint8Array;
                        Shared: {
                            initialSharedVersion: string | number | bigint;
                        };
                        Immutable: boolean | object | null;
                    }>];
                }>;
                outputState: import("@iota/bcs").EnumInputShape<{
                    NotExist: boolean | object | null;
                    ObjectWrite: readonly [string, import("@iota/bcs").EnumInputShape<{
                        AddressOwner: string | Uint8Array;
                        ObjectOwner: string | Uint8Array;
                        Shared: {
                            initialSharedVersion: string | number | bigint;
                        };
                        Immutable: boolean | object | null;
                    }>];
                    PackageWrite: readonly [string | number | bigint, string];
                }>;
                idOperation: import("@iota/bcs").EnumInputShape<{
                    None: boolean | object | null;
                    Created: boolean | object | null;
                    Deleted: boolean | object | null;
                }>;
            }]> & {
                length: number;
            };
            unchangedSharedObjects: Iterable<readonly [string | Uint8Array, import("@iota/bcs").EnumInputShape<{
                ReadOnlyRoot: readonly [string | number | bigint, string];
                MutateDeleted: string | number | bigint;
                ReadDeleted: string | number | bigint;
                Cancelled: string | number | bigint;
                PerEpochConfig: boolean | object | null;
            }>]> & {
                length: number;
            };
            auxDataDigest: string | null | undefined;
        };
    }>;
    PasskeyAuthenticator: import("@iota/bcs").BcsType<{
        authenticatorData: number[];
        clientDataJson: string;
        userSignature: number[];
    }, {
        authenticatorData: Iterable<number> & {
            length: number;
        };
        clientDataJson: string;
        userSignature: Iterable<number> & {
            length: number;
        };
    }>;
    u8(options?: import("@iota/bcs").BcsTypeOptions<number>): import("@iota/bcs").BcsType<number, number>;
    u16(options?: import("@iota/bcs").BcsTypeOptions<number>): import("@iota/bcs").BcsType<number, number>;
    u32(options?: import("@iota/bcs").BcsTypeOptions<number>): import("@iota/bcs").BcsType<number, number>;
    u64(options?: import("@iota/bcs").BcsTypeOptions<string, number | bigint | string>): import("@iota/bcs").BcsType<string, string | number | bigint>;
    u128(options?: import("@iota/bcs").BcsTypeOptions<string, number | bigint | string>): import("@iota/bcs").BcsType<string, string | number | bigint>;
    u256(options?: import("@iota/bcs").BcsTypeOptions<string, number | bigint | string>): import("@iota/bcs").BcsType<string, string | number | bigint>;
    bool(options?: import("@iota/bcs").BcsTypeOptions<boolean>): import("@iota/bcs").BcsType<boolean, boolean>;
    uleb128(options?: import("@iota/bcs").BcsTypeOptions<number>): import("@iota/bcs").BcsType<number, number>;
    bytes<T extends number>(size: T, options?: import("@iota/bcs").BcsTypeOptions<Uint8Array, Iterable<number>>): import("@iota/bcs").BcsType<Uint8Array, Uint8Array>;
    byteVector(options?: import("@iota/bcs").BcsTypeOptions<Uint8Array, Iterable<number>>): import("@iota/bcs").BcsType<Uint8Array, Iterable<number>>;
    string(options?: import("@iota/bcs").BcsTypeOptions<string>): import("@iota/bcs").BcsType<string, string>;
    fixedArray<T, Input>(size: number, type: import("@iota/bcs").BcsType<T, Input>, options?: import("@iota/bcs").BcsTypeOptions<T[], Iterable<Input> & {
        length: number;
    }>): import("@iota/bcs").BcsType<T[], Iterable<Input> & {
        length: number;
    }>;
    option<T, Input>(type: import("@iota/bcs").BcsType<T, Input>): import("@iota/bcs").BcsType<T | null, Input | null | undefined>;
    vector<T, Input>(type: import("@iota/bcs").BcsType<T, Input>, options?: import("@iota/bcs").BcsTypeOptions<T[], Iterable<Input> & {
        length: number;
    }>): import("@iota/bcs").BcsType<T[], Iterable<Input> & {
        length: number;
    }>;
    tuple<const Types extends readonly import("@iota/bcs").BcsType<any>[]>(types: Types, options?: import("@iota/bcs").BcsTypeOptions<{ -readonly [K in keyof Types]: Types[K] extends import("@iota/bcs").BcsType<infer T, any> ? T : never; }, { [K in keyof Types]: Types[K] extends import("@iota/bcs").BcsType<any, infer T> ? T : never; }>): import("@iota/bcs").BcsType<{ -readonly [K in keyof Types]: Types[K] extends import("@iota/bcs").BcsType<infer T, any> ? T : never; }, { [K_1 in keyof Types]: Types[K_1] extends import("@iota/bcs").BcsType<any, infer T_1> ? T_1 : never; }>;
    struct<T extends Record<string, import("@iota/bcs").BcsType<any>>>(name: string, fields: T, options?: Omit<import("@iota/bcs").BcsTypeOptions<{ [K in keyof T]: T[K] extends import("@iota/bcs").BcsType<infer U, any> ? U : never; }, { [K in keyof T]: T[K] extends import("@iota/bcs").BcsType<any, infer U> ? U : never; }>, "name">): import("@iota/bcs").BcsType<{ [K in keyof T]: T[K] extends import("@iota/bcs").BcsType<infer U, any> ? U : never; }, { [K_1 in keyof T]: T[K_1] extends import("@iota/bcs").BcsType<any, infer U_1> ? U_1 : never; }>;
    enum<T extends Record<string, import("@iota/bcs").BcsType<any> | null>>(name: string, values: T, options?: Omit<import("@iota/bcs").BcsTypeOptions<import("@iota/bcs").EnumOutputShape<{ [K in keyof T]: T[K] extends import("@iota/bcs").BcsType<infer U, any> ? U : true; }>, import("@iota/bcs").EnumInputShape<{ [K in keyof T]: T[K] extends import("@iota/bcs").BcsType<any, infer U> ? U : boolean | object | null; }>>, "name">): import("@iota/bcs").BcsType<import("@iota/bcs").EnumOutputShape<{ [K in keyof T]: T[K] extends import("@iota/bcs").BcsType<infer U, any> ? U : true; }>, import("@iota/bcs").EnumInputShape<{ [K_1 in keyof T]: T[K_1] extends import("@iota/bcs").BcsType<any, infer U_1> ? U_1 : boolean | object | null; }>>;
    map<K, V, InputK = K, InputV = V>(keyType: import("@iota/bcs").BcsType<K, InputK>, valueType: import("@iota/bcs").BcsType<V, InputV>): import("@iota/bcs").BcsType<Map<K, V>, Map<InputK, InputV>>;
    lazy<T extends import("@iota/bcs").BcsType<any>>(cb: () => T): T;
};
export { iotaBcs as bcs };
