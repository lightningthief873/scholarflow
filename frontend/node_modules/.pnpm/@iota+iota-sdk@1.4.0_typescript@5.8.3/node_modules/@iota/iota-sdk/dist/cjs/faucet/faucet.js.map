{
  "version": 3,
  "sources": ["../../../src/faucet/faucet.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { NetworkId } from '../client/index.js';\nimport { getNetwork } from '../client/index.js';\n\nexport class FaucetRateLimitError extends Error {}\n\ntype FaucetCoinInfo = {\n    amount: number;\n    id: string;\n    transferTxDigest: string;\n};\n\ntype FaucetResponse = {\n    transferredGasObjects: FaucetCoinInfo[];\n    error?: string | null;\n};\n\ntype BatchFaucetResponse = {\n    task?: string | null;\n    error?: string | null;\n};\n\ntype BatchSendStatusType = {\n    status: 'INPROGRESS' | 'SUCCEEDED' | 'DISCARDED';\n    transferred_gas_objects: { sent: FaucetCoinInfo[] };\n};\n\ntype BatchStatusFaucetResponse = {\n    status: BatchSendStatusType;\n    error?: string | null;\n};\n\ntype FaucetRequest = {\n    host: string;\n    path: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    body?: Record<string, any>;\n    headers?: HeadersInit;\n    method: 'GET' | 'POST';\n};\n\nasync function faucetRequest({ host, path, body, headers, method }: FaucetRequest) {\n    const endpoint = new URL(path, host).toString();\n    const res = await fetch(endpoint, {\n        method,\n        body: body ? JSON.stringify(body) : undefined,\n        headers: {\n            'Content-Type': 'application/json',\n            ...(headers || {}),\n        },\n    });\n\n    if (res.status === 429) {\n        throw new FaucetRateLimitError(\n            `Too many requests from this client have been sent to the faucet. Please retry later`,\n        );\n    }\n\n    try {\n        const parsed = await res.json();\n        if (parsed.error) {\n            throw new Error(`Faucet returns error: ${parsed.error}`);\n        }\n        return parsed;\n    } catch (e) {\n        throw new Error(\n            `Encountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`,\n        );\n    }\n}\n\nexport async function requestIotaFromFaucetV0(input: {\n    host: string;\n    recipient: string;\n    headers?: HeadersInit;\n}): Promise<FaucetResponse> {\n    return faucetRequest({\n        host: input.host,\n        path: '/gas',\n        body: {\n            FixedAmountRequest: {\n                recipient: input.recipient,\n            },\n        },\n        headers: input.headers,\n        method: 'POST',\n    });\n}\n\nexport async function requestIotaFromFaucetV1(input: {\n    host: string;\n    recipient: string;\n    headers?: HeadersInit;\n}): Promise<BatchFaucetResponse> {\n    return faucetRequest({\n        host: input.host,\n        path: '/v1/gas',\n        body: {\n            FixedAmountRequest: {\n                recipient: input.recipient,\n            },\n        },\n        headers: input.headers,\n        method: 'POST',\n    });\n}\n\nexport async function getFaucetRequestStatus(input: {\n    host: string;\n    taskId: string;\n    headers?: HeadersInit;\n}): Promise<BatchStatusFaucetResponse> {\n    return faucetRequest({\n        host: input.host,\n        path: `/v1/status/${input.taskId}`,\n        headers: input.headers,\n        method: 'GET',\n    });\n}\n\nexport function getFaucetHost(network: NetworkId): string {\n    const requestedNetwork = getNetwork(network);\n\n    if (!requestedNetwork.faucet) {\n        throw new Error(`Unknown network: ${network}`);\n    }\n\n    return requestedNetwork.faucet;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,oBAA2B;AAEpB,MAAM,6BAA6B,MAAM;AAAC;AAqCjD,eAAe,cAAc,EAAE,MAAM,MAAM,MAAM,SAAS,OAAO,GAAkB;AAC/E,QAAM,WAAW,IAAI,IAAI,MAAM,IAAI,EAAE,SAAS;AAC9C,QAAM,MAAM,MAAM,MAAM,UAAU;AAAA,IAC9B;AAAA,IACA,MAAM,OAAO,KAAK,UAAU,IAAI,IAAI;AAAA,IACpC,SAAS;AAAA,MACL,gBAAgB;AAAA,MAChB,GAAI,WAAW,CAAC;AAAA,IACpB;AAAA,EACJ,CAAC;AAED,MAAI,IAAI,WAAW,KAAK;AACpB,UAAM,IAAI;AAAA,MACN;AAAA,IACJ;AAAA,EACJ;AAEA,MAAI;AACA,UAAM,SAAS,MAAM,IAAI,KAAK;AAC9B,QAAI,OAAO,OAAO;AACd,YAAM,IAAI,MAAM,yBAAyB,OAAO,KAAK,EAAE;AAAA,IAC3D;AACA,WAAO;AAAA,EACX,SAAS,GAAG;AACR,UAAM,IAAI;AAAA,MACN,+DAA+D,CAAC,YAAY,IAAI,MAAM,cAAc,GAAG;AAAA,IAC3G;AAAA,EACJ;AACJ;AAEA,eAAsB,wBAAwB,OAIlB;AACxB,SAAO,cAAc;AAAA,IACjB,MAAM,MAAM;AAAA,IACZ,MAAM;AAAA,IACN,MAAM;AAAA,MACF,oBAAoB;AAAA,QAChB,WAAW,MAAM;AAAA,MACrB;AAAA,IACJ;AAAA,IACA,SAAS,MAAM;AAAA,IACf,QAAQ;AAAA,EACZ,CAAC;AACL;AAEA,eAAsB,wBAAwB,OAIb;AAC7B,SAAO,cAAc;AAAA,IACjB,MAAM,MAAM;AAAA,IACZ,MAAM;AAAA,IACN,MAAM;AAAA,MACF,oBAAoB;AAAA,QAChB,WAAW,MAAM;AAAA,MACrB;AAAA,IACJ;AAAA,IACA,SAAS,MAAM;AAAA,IACf,QAAQ;AAAA,EACZ,CAAC;AACL;AAEA,eAAsB,uBAAuB,OAIN;AACnC,SAAO,cAAc;AAAA,IACjB,MAAM,MAAM;AAAA,IACZ,MAAM,cAAc,MAAM,MAAM;AAAA,IAChC,SAAS,MAAM;AAAA,IACf,QAAQ;AAAA,EACZ,CAAC;AACL;AAEO,SAAS,cAAc,SAA4B;AACtD,QAAM,uBAAmB,0BAAW,OAAO;AAE3C,MAAI,CAAC,iBAAiB,QAAQ;AAC1B,UAAM,IAAI,MAAM,oBAAoB,OAAO,EAAE;AAAA,EACjD;AAEA,SAAO,iBAAiB;AAC5B;",
  "names": []
}
