import type { BcsType } from '@iota/bcs';
import type { TypeTag as TypeTagType } from './types.js';
export declare const Address: BcsType<string, string | Uint8Array>;
export declare const ObjectDigest: BcsType<string, string>;
export declare const IotaObjectRef: BcsType<{
    objectId: string;
    version: string;
    digest: string;
}, {
    objectId: string | Uint8Array;
    version: string | number | bigint;
    digest: string;
}>;
export declare const SharedObjectRef: BcsType<{
    objectId: string;
    initialSharedVersion: string;
    mutable: boolean;
}, {
    objectId: string | Uint8Array;
    initialSharedVersion: string | number | bigint;
    mutable: boolean;
}>;
export declare const ObjectArg: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    ImmOrOwnedObject: {
        objectId: string;
        version: string;
        digest: string;
    };
    SharedObject: {
        objectId: string;
        initialSharedVersion: string;
        mutable: boolean;
    };
    Receiving: {
        objectId: string;
        version: string;
        digest: string;
    };
}, "ImmOrOwnedObject" | "SharedObject" | "Receiving">, import("@iota/bcs").EnumInputShape<{
    ImmOrOwnedObject: {
        objectId: string | Uint8Array;
        version: string | number | bigint;
        digest: string;
    };
    SharedObject: {
        objectId: string | Uint8Array;
        initialSharedVersion: string | number | bigint;
        mutable: boolean;
    };
    Receiving: {
        objectId: string | Uint8Array;
        version: string | number | bigint;
        digest: string;
    };
}>>;
export declare const Owner: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    AddressOwner: string;
    ObjectOwner: string;
    Shared: {
        initialSharedVersion: string;
    };
    Immutable: true;
}, "AddressOwner" | "ObjectOwner" | "Shared" | "Immutable">, import("@iota/bcs").EnumInputShape<{
    AddressOwner: string | Uint8Array;
    ObjectOwner: string | Uint8Array;
    Shared: {
        initialSharedVersion: string | number | bigint;
    };
    Immutable: boolean | object | null;
}>>;
export declare const CallArg: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    Pure: {
        bytes: string;
    };
    Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
        ImmOrOwnedObject: {
            objectId: string;
            version: string;
            digest: string;
        };
        SharedObject: {
            objectId: string;
            initialSharedVersion: string;
            mutable: boolean;
        };
        Receiving: {
            objectId: string;
            version: string;
            digest: string;
        };
    }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
}, "Pure" | "Object">, import("@iota/bcs").EnumInputShape<{
    Pure: {
        bytes: string | Uint8Array;
    };
    Object: import("@iota/bcs").EnumInputShape<{
        ImmOrOwnedObject: {
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        };
        SharedObject: {
            objectId: string | Uint8Array;
            initialSharedVersion: string | number | bigint;
            mutable: boolean;
        };
        Receiving: {
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        };
    }>;
}>>;
export declare const TypeTag: BcsType<string, string | TypeTagType>;
export declare const Argument: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    GasCoin: true;
    Input: number;
    Result: number;
    NestedResult: [number, number];
}, "GasCoin" | "Input" | "Result" | "NestedResult">, import("@iota/bcs").EnumInputShape<{
    GasCoin: boolean | object | null;
    Input: number;
    Result: number;
    NestedResult: readonly [number, number];
}>>;
export declare const ProgrammableMoveCall: BcsType<{
    package: string;
    module: string;
    function: string;
    typeArguments: string[];
    arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
        GasCoin: true;
        Input: number;
        Result: number;
        NestedResult: [number, number];
    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
}, {
    package: string | Uint8Array;
    module: string;
    function: string;
    typeArguments: Iterable<string | TypeTagType> & {
        length: number;
    };
    arguments: Iterable<import("@iota/bcs").EnumInputShape<{
        GasCoin: boolean | object | null;
        Input: number;
        Result: number;
        NestedResult: readonly [number, number];
    }>> & {
        length: number;
    };
}>;
export declare const Command: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    MoveCall: {
        package: string;
        module: string;
        function: string;
        typeArguments: string[];
        arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
    };
    TransferObjects: {
        objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        address: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
    };
    SplitCoins: {
        coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
        amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
    };
    MergeCoins: {
        destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
        sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
    };
    Publish: {
        modules: string[];
        dependencies: string[];
    };
    MakeMoveVec: {
        type: string | null;
        elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
    };
    Upgrade: {
        modules: string[];
        dependencies: string[];
        package: string;
        ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
            GasCoin: true;
            Input: number;
            Result: number;
            NestedResult: [number, number];
        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
    };
}, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">, import("@iota/bcs").EnumInputShape<{
    MoveCall: {
        package: string | Uint8Array;
        module: string;
        function: string;
        typeArguments: Iterable<string | TypeTagType> & {
            length: number;
        };
        arguments: Iterable<import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>> & {
            length: number;
        };
    };
    TransferObjects: {
        objects: Iterable<import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>> & {
            length: number;
        };
        address: import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>;
    };
    SplitCoins: {
        coin: import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>;
        amounts: Iterable<import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>> & {
            length: number;
        };
    };
    MergeCoins: {
        destination: import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>;
        sources: Iterable<import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>> & {
            length: number;
        };
    };
    Publish: {
        modules: Iterable<string | Uint8Array> & {
            length: number;
        };
        dependencies: Iterable<string | Uint8Array> & {
            length: number;
        };
    };
    MakeMoveVec: {
        type: string | null;
        elements: Iterable<import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>> & {
            length: number;
        };
    };
    Upgrade: {
        modules: Iterable<string | Uint8Array> & {
            length: number;
        };
        dependencies: Iterable<string | Uint8Array> & {
            length: number;
        };
        package: string | Uint8Array;
        ticket: import("@iota/bcs").EnumInputShape<{
            GasCoin: boolean | object | null;
            Input: number;
            Result: number;
            NestedResult: readonly [number, number];
        }>;
    };
}>>;
export declare const ProgrammableTransaction: BcsType<{
    inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
        Pure: {
            bytes: string;
        };
        Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
            ImmOrOwnedObject: {
                objectId: string;
                version: string;
                digest: string;
            };
            SharedObject: {
                objectId: string;
                initialSharedVersion: string;
                mutable: boolean;
            };
            Receiving: {
                objectId: string;
                version: string;
                digest: string;
            };
        }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
    }, "Pure" | "Object">[];
    commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
        MoveCall: {
            package: string;
            module: string;
            function: string;
            typeArguments: string[];
            arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        TransferObjects: {
            objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
        };
        SplitCoins: {
            coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        MergeCoins: {
            destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        Publish: {
            modules: string[];
            dependencies: string[];
        };
        MakeMoveVec: {
            type: string | null;
            elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
        };
        Upgrade: {
            modules: string[];
            dependencies: string[];
            package: string;
            ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                GasCoin: true;
                Input: number;
                Result: number;
                NestedResult: [number, number];
            }, "GasCoin" | "Input" | "Result" | "NestedResult">;
        };
    }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
}, {
    inputs: Iterable<import("@iota/bcs").EnumInputShape<{
        Pure: {
            bytes: string | Uint8Array;
        };
        Object: import("@iota/bcs").EnumInputShape<{
            ImmOrOwnedObject: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
            SharedObject: {
                objectId: string | Uint8Array;
                initialSharedVersion: string | number | bigint;
                mutable: boolean;
            };
            Receiving: {
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            };
        }>;
    }>> & {
        length: number;
    };
    commands: Iterable<import("@iota/bcs").EnumInputShape<{
        MoveCall: {
            package: string | Uint8Array;
            module: string;
            function: string;
            typeArguments: Iterable<string | TypeTagType> & {
                length: number;
            };
            arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        TransferObjects: {
            objects: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
            address: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
        };
        SplitCoins: {
            coin: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
            amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        MergeCoins: {
            destination: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
            sources: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        Publish: {
            modules: Iterable<string | Uint8Array> & {
                length: number;
            };
            dependencies: Iterable<string | Uint8Array> & {
                length: number;
            };
        };
        MakeMoveVec: {
            type: string | null;
            elements: Iterable<import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>> & {
                length: number;
            };
        };
        Upgrade: {
            modules: Iterable<string | Uint8Array> & {
                length: number;
            };
            dependencies: Iterable<string | Uint8Array> & {
                length: number;
            };
            package: string | Uint8Array;
            ticket: import("@iota/bcs").EnumInputShape<{
                GasCoin: boolean | object | null;
                Input: number;
                Result: number;
                NestedResult: readonly [number, number];
            }>;
        };
    }>> & {
        length: number;
    };
}>;
export declare const TransactionKind: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    ProgrammableTransaction: {
        inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
            Pure: {
                bytes: string;
            };
            Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                ImmOrOwnedObject: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
                SharedObject: {
                    objectId: string;
                    initialSharedVersion: string;
                    mutable: boolean;
                };
                Receiving: {
                    objectId: string;
                    version: string;
                    digest: string;
                };
            }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
        }, "Pure" | "Object">[];
        commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
            MoveCall: {
                package: string;
                module: string;
                function: string;
                typeArguments: string[];
                arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            TransferObjects: {
                objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            };
            SplitCoins: {
                coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            MergeCoins: {
                destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            Publish: {
                modules: string[];
                dependencies: string[];
            };
            MakeMoveVec: {
                type: string | null;
                elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
            };
            Upgrade: {
                modules: string[];
                dependencies: string[];
                package: string;
                ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    GasCoin: true;
                    Input: number;
                    Result: number;
                    NestedResult: [number, number];
                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
            };
        }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
    };
    ChangeEpoch: true;
    Genesis: true;
    ConsensusCommitPrologue: true;
}, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">, import("@iota/bcs").EnumInputShape<{
    ProgrammableTransaction: {
        inputs: Iterable<import("@iota/bcs").EnumInputShape<{
            Pure: {
                bytes: string | Uint8Array;
            };
            Object: import("@iota/bcs").EnumInputShape<{
                ImmOrOwnedObject: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
                SharedObject: {
                    objectId: string | Uint8Array;
                    initialSharedVersion: string | number | bigint;
                    mutable: boolean;
                };
                Receiving: {
                    objectId: string | Uint8Array;
                    version: string | number | bigint;
                    digest: string;
                };
            }>;
        }>> & {
            length: number;
        };
        commands: Iterable<import("@iota/bcs").EnumInputShape<{
            MoveCall: {
                package: string | Uint8Array;
                module: string;
                function: string;
                typeArguments: Iterable<string | TypeTagType> & {
                    length: number;
                };
                arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            TransferObjects: {
                objects: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
                address: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
            };
            SplitCoins: {
                coin: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
                amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            MergeCoins: {
                destination: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
                sources: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            Publish: {
                modules: Iterable<string | Uint8Array> & {
                    length: number;
                };
                dependencies: Iterable<string | Uint8Array> & {
                    length: number;
                };
            };
            MakeMoveVec: {
                type: string | null;
                elements: Iterable<import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>> & {
                    length: number;
                };
            };
            Upgrade: {
                modules: Iterable<string | Uint8Array> & {
                    length: number;
                };
                dependencies: Iterable<string | Uint8Array> & {
                    length: number;
                };
                package: string | Uint8Array;
                ticket: import("@iota/bcs").EnumInputShape<{
                    GasCoin: boolean | object | null;
                    Input: number;
                    Result: number;
                    NestedResult: readonly [number, number];
                }>;
            };
        }>> & {
            length: number;
        };
    };
    ChangeEpoch: boolean | object | null;
    Genesis: boolean | object | null;
    ConsensusCommitPrologue: boolean | object | null;
}>>;
export declare const TransactionExpiration: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    None: true;
    Epoch: number;
}, "None" | "Epoch">, import("@iota/bcs").EnumInputShape<{
    None: boolean | object | null;
    Epoch: string | number;
}>>;
export declare const StructTag: BcsType<{
    address: string;
    module: string;
    name: string;
    typeParams: TypeTagType[];
}, {
    address: string | Uint8Array;
    module: string;
    name: string;
    typeParams: Iterable<TypeTagType> & {
        length: number;
    };
}>;
export declare const GasData: BcsType<{
    payment: {
        objectId: string;
        version: string;
        digest: string;
    }[];
    owner: string;
    price: string;
    budget: string;
}, {
    payment: Iterable<{
        objectId: string | Uint8Array;
        version: string | number | bigint;
        digest: string;
    }> & {
        length: number;
    };
    owner: string | Uint8Array;
    price: string | number | bigint;
    budget: string | number | bigint;
}>;
export declare const TransactionDataV1: BcsType<{
    kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
        ProgrammableTransaction: {
            inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                Pure: {
                    bytes: string;
                };
                Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    ImmOrOwnedObject: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                    SharedObject: {
                        objectId: string;
                        initialSharedVersion: string;
                        mutable: boolean;
                    };
                    Receiving: {
                        objectId: string;
                        version: string;
                        digest: string;
                    };
                }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
            }, "Pure" | "Object">[];
            commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                MoveCall: {
                    package: string;
                    module: string;
                    function: string;
                    typeArguments: string[];
                    arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                TransferObjects: {
                    objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                };
                SplitCoins: {
                    coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                MergeCoins: {
                    destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                Publish: {
                    modules: string[];
                    dependencies: string[];
                };
                MakeMoveVec: {
                    type: string | null;
                    elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                };
                Upgrade: {
                    modules: string[];
                    dependencies: string[];
                    package: string;
                    ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        GasCoin: true;
                        Input: number;
                        Result: number;
                        NestedResult: [number, number];
                    }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                };
            }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
        };
        ChangeEpoch: true;
        Genesis: true;
        ConsensusCommitPrologue: true;
    }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
    sender: string;
    gasData: {
        payment: {
            objectId: string;
            version: string;
            digest: string;
        }[];
        owner: string;
        price: string;
        budget: string;
    };
    expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
        None: true;
        Epoch: number;
    }, "None" | "Epoch">;
}, {
    kind: import("@iota/bcs").EnumInputShape<{
        ProgrammableTransaction: {
            inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                Pure: {
                    bytes: string | Uint8Array;
                };
                Object: import("@iota/bcs").EnumInputShape<{
                    ImmOrOwnedObject: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                    SharedObject: {
                        objectId: string | Uint8Array;
                        initialSharedVersion: string | number | bigint;
                        mutable: boolean;
                    };
                    Receiving: {
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    };
                }>;
            }>> & {
                length: number;
            };
            commands: Iterable<import("@iota/bcs").EnumInputShape<{
                MoveCall: {
                    package: string | Uint8Array;
                    module: string;
                    function: string;
                    typeArguments: Iterable<string | TypeTagType> & {
                        length: number;
                    };
                    arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                TransferObjects: {
                    objects: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                    address: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                };
                SplitCoins: {
                    coin: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                    amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                MergeCoins: {
                    destination: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                    sources: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                Publish: {
                    modules: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    dependencies: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                };
                MakeMoveVec: {
                    type: string | null;
                    elements: Iterable<import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>> & {
                        length: number;
                    };
                };
                Upgrade: {
                    modules: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    dependencies: Iterable<string | Uint8Array> & {
                        length: number;
                    };
                    package: string | Uint8Array;
                    ticket: import("@iota/bcs").EnumInputShape<{
                        GasCoin: boolean | object | null;
                        Input: number;
                        Result: number;
                        NestedResult: readonly [number, number];
                    }>;
                };
            }>> & {
                length: number;
            };
        };
        ChangeEpoch: boolean | object | null;
        Genesis: boolean | object | null;
        ConsensusCommitPrologue: boolean | object | null;
    }>;
    sender: string | Uint8Array;
    gasData: {
        payment: Iterable<{
            objectId: string | Uint8Array;
            version: string | number | bigint;
            digest: string;
        }> & {
            length: number;
        };
        owner: string | Uint8Array;
        price: string | number | bigint;
        budget: string | number | bigint;
    };
    expiration: import("@iota/bcs").EnumInputShape<{
        None: boolean | object | null;
        Epoch: string | number;
    }>;
}>;
export declare const TransactionData: BcsType<{
    V1: {
        kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
            ProgrammableTransaction: {
                inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    Pure: {
                        bytes: string;
                    };
                    Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                        ImmOrOwnedObject: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                        SharedObject: {
                            objectId: string;
                            initialSharedVersion: string;
                            mutable: boolean;
                        };
                        Receiving: {
                            objectId: string;
                            version: string;
                            digest: string;
                        };
                    }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
                }, "Pure" | "Object">[];
                commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    MoveCall: {
                        package: string;
                        module: string;
                        function: string;
                        typeArguments: string[];
                        arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    TransferObjects: {
                        objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                        address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    };
                    SplitCoins: {
                        coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                        amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    MergeCoins: {
                        destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                        sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    Publish: {
                        modules: string[];
                        dependencies: string[];
                    };
                    MakeMoveVec: {
                        type: string | null;
                        elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                    };
                    Upgrade: {
                        modules: string[];
                        dependencies: string[];
                        package: string;
                        ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            GasCoin: true;
                            Input: number;
                            Result: number;
                            NestedResult: [number, number];
                        }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                    };
                }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
            };
            ChangeEpoch: true;
            Genesis: true;
            ConsensusCommitPrologue: true;
        }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
        sender: string;
        gasData: {
            payment: {
                objectId: string;
                version: string;
                digest: string;
            }[];
            owner: string;
            price: string;
            budget: string;
        };
        expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
            None: true;
            Epoch: number;
        }, "None" | "Epoch">;
    };
    $kind: "V1";
}, {
    V1: {
        kind: import("@iota/bcs").EnumInputShape<{
            ProgrammableTransaction: {
                inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                    Pure: {
                        bytes: string | Uint8Array;
                    };
                    Object: import("@iota/bcs").EnumInputShape<{
                        ImmOrOwnedObject: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                        SharedObject: {
                            objectId: string | Uint8Array;
                            initialSharedVersion: string | number | bigint;
                            mutable: boolean;
                        };
                        Receiving: {
                            objectId: string | Uint8Array;
                            version: string | number | bigint;
                            digest: string;
                        };
                    }>;
                }>> & {
                    length: number;
                };
                commands: Iterable<import("@iota/bcs").EnumInputShape<{
                    MoveCall: {
                        package: string | Uint8Array;
                        module: string;
                        function: string;
                        typeArguments: Iterable<string | TypeTagType> & {
                            length: number;
                        };
                        arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    TransferObjects: {
                        objects: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                        address: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                    };
                    SplitCoins: {
                        coin: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                        amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    MergeCoins: {
                        destination: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                        sources: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    Publish: {
                        modules: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        dependencies: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                    };
                    MakeMoveVec: {
                        type: string | null;
                        elements: Iterable<import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>> & {
                            length: number;
                        };
                    };
                    Upgrade: {
                        modules: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        dependencies: Iterable<string | Uint8Array> & {
                            length: number;
                        };
                        package: string | Uint8Array;
                        ticket: import("@iota/bcs").EnumInputShape<{
                            GasCoin: boolean | object | null;
                            Input: number;
                            Result: number;
                            NestedResult: readonly [number, number];
                        }>;
                    };
                }>> & {
                    length: number;
                };
            };
            ChangeEpoch: boolean | object | null;
            Genesis: boolean | object | null;
            ConsensusCommitPrologue: boolean | object | null;
        }>;
        sender: string | Uint8Array;
        gasData: {
            payment: Iterable<{
                objectId: string | Uint8Array;
                version: string | number | bigint;
                digest: string;
            }> & {
                length: number;
            };
            owner: string | Uint8Array;
            price: string | number | bigint;
            budget: string | number | bigint;
        };
        expiration: import("@iota/bcs").EnumInputShape<{
            None: boolean | object | null;
            Epoch: string | number;
        }>;
    };
}>;
export declare const IntentScope: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    TransactionData: true;
    TransactionEffects: true;
    CheckpointSummary: true;
    PersonalMessage: true;
}, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">, import("@iota/bcs").EnumInputShape<{
    TransactionData: boolean | object | null;
    TransactionEffects: boolean | object | null;
    CheckpointSummary: boolean | object | null;
    PersonalMessage: boolean | object | null;
}>>;
export declare const IntentVersion: BcsType<{
    V0: true;
    $kind: "V0";
}, {
    V0: boolean | object | null;
}>;
export declare const AppId: BcsType<{
    Iota: true;
    $kind: "Iota";
}, {
    Iota: boolean | object | null;
}>;
export declare const Intent: BcsType<{
    scope: import("@iota/bcs").EnumOutputShapeWithKeys<{
        TransactionData: true;
        TransactionEffects: true;
        CheckpointSummary: true;
        PersonalMessage: true;
    }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">;
    version: {
        V0: true;
        $kind: "V0";
    };
    appId: {
        Iota: true;
        $kind: "Iota";
    };
}, {
    scope: import("@iota/bcs").EnumInputShape<{
        TransactionData: boolean | object | null;
        TransactionEffects: boolean | object | null;
        CheckpointSummary: boolean | object | null;
        PersonalMessage: boolean | object | null;
    }>;
    version: {
        V0: boolean | object | null;
    };
    appId: {
        Iota: boolean | object | null;
    };
}>;
export declare function IntentMessage<T extends BcsType<any>>(T: T): BcsType<{
    intent: {
        scope: import("@iota/bcs").EnumOutputShapeWithKeys<{
            TransactionData: true;
            TransactionEffects: true;
            CheckpointSummary: true;
            PersonalMessage: true;
        }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">;
        version: {
            V0: true;
            $kind: "V0";
        };
        appId: {
            Iota: true;
            $kind: "Iota";
        };
    };
    value: T extends BcsType<infer U, any> ? U : never;
}, {
    intent: {
        scope: import("@iota/bcs").EnumInputShape<{
            TransactionData: boolean | object | null;
            TransactionEffects: boolean | object | null;
            CheckpointSummary: boolean | object | null;
            PersonalMessage: boolean | object | null;
        }>;
        version: {
            V0: boolean | object | null;
        };
        appId: {
            Iota: boolean | object | null;
        };
    };
    value: T extends BcsType<any, infer U_1> ? U_1 : never;
}>;
export declare const CompressedSignature: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    ED25519: number[];
    Secp256k1: number[];
    Secp256r1: number[];
}, "ED25519" | "Secp256k1" | "Secp256r1">, import("@iota/bcs").EnumInputShape<{
    ED25519: Iterable<number> & {
        length: number;
    };
    Secp256k1: Iterable<number> & {
        length: number;
    };
    Secp256r1: Iterable<number> & {
        length: number;
    };
}>>;
export declare const PublicKey: BcsType<import("@iota/bcs").EnumOutputShapeWithKeys<{
    ED25519: number[];
    Secp256k1: number[];
    Secp256r1: number[];
}, "ED25519" | "Secp256k1" | "Secp256r1">, import("@iota/bcs").EnumInputShape<{
    ED25519: Iterable<number> & {
        length: number;
    };
    Secp256k1: Iterable<number> & {
        length: number;
    };
    Secp256r1: Iterable<number> & {
        length: number;
    };
}>>;
export declare const MultiSigPkMap: BcsType<{
    pubKey: import("@iota/bcs").EnumOutputShapeWithKeys<{
        ED25519: number[];
        Secp256k1: number[];
        Secp256r1: number[];
    }, "ED25519" | "Secp256k1" | "Secp256r1">;
    weight: number;
}, {
    pubKey: import("@iota/bcs").EnumInputShape<{
        ED25519: Iterable<number> & {
            length: number;
        };
        Secp256k1: Iterable<number> & {
            length: number;
        };
        Secp256r1: Iterable<number> & {
            length: number;
        };
    }>;
    weight: number;
}>;
export declare const MultiSigPublicKey: BcsType<{
    pk_map: {
        pubKey: import("@iota/bcs").EnumOutputShapeWithKeys<{
            ED25519: number[];
            Secp256k1: number[];
            Secp256r1: number[];
        }, "ED25519" | "Secp256k1" | "Secp256r1">;
        weight: number;
    }[];
    threshold: number;
}, {
    pk_map: Iterable<{
        pubKey: import("@iota/bcs").EnumInputShape<{
            ED25519: Iterable<number> & {
                length: number;
            };
            Secp256k1: Iterable<number> & {
                length: number;
            };
            Secp256r1: Iterable<number> & {
                length: number;
            };
        }>;
        weight: number;
    }> & {
        length: number;
    };
    threshold: number;
}>;
export declare const MultiSig: BcsType<{
    sigs: import("@iota/bcs").EnumOutputShapeWithKeys<{
        ED25519: number[];
        Secp256k1: number[];
        Secp256r1: number[];
    }, "ED25519" | "Secp256k1" | "Secp256r1">[];
    bitmap: number;
    multisig_pk: {
        pk_map: {
            pubKey: import("@iota/bcs").EnumOutputShapeWithKeys<{
                ED25519: number[];
                Secp256k1: number[];
                Secp256r1: number[];
            }, "ED25519" | "Secp256k1" | "Secp256r1">;
            weight: number;
        }[];
        threshold: number;
    };
}, {
    sigs: Iterable<import("@iota/bcs").EnumInputShape<{
        ED25519: Iterable<number> & {
            length: number;
        };
        Secp256k1: Iterable<number> & {
            length: number;
        };
        Secp256r1: Iterable<number> & {
            length: number;
        };
    }>> & {
        length: number;
    };
    bitmap: number;
    multisig_pk: {
        pk_map: Iterable<{
            pubKey: import("@iota/bcs").EnumInputShape<{
                ED25519: Iterable<number> & {
                    length: number;
                };
                Secp256k1: Iterable<number> & {
                    length: number;
                };
                Secp256r1: Iterable<number> & {
                    length: number;
                };
            }>;
            weight: number;
        }> & {
            length: number;
        };
        threshold: number;
    };
}>;
export declare const base64String: BcsType<string, string | Uint8Array>;
export declare const SenderSignedTransaction: BcsType<{
    intentMessage: {
        intent: {
            scope: import("@iota/bcs").EnumOutputShapeWithKeys<{
                TransactionData: true;
                TransactionEffects: true;
                CheckpointSummary: true;
                PersonalMessage: true;
            }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">;
            version: {
                V0: true;
                $kind: "V0";
            };
            appId: {
                Iota: true;
                $kind: "Iota";
            };
        };
        value: {
            V1: {
                kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    ProgrammableTransaction: {
                        inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            Pure: {
                                bytes: string;
                            };
                            Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                ImmOrOwnedObject: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                                SharedObject: {
                                    objectId: string;
                                    initialSharedVersion: string;
                                    mutable: boolean;
                                };
                                Receiving: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                            }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
                        }, "Pure" | "Object">[];
                        commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            MoveCall: {
                                package: string;
                                module: string;
                                function: string;
                                typeArguments: string[];
                                arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            TransferObjects: {
                                objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                            };
                            SplitCoins: {
                                coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            MergeCoins: {
                                destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            Publish: {
                                modules: string[];
                                dependencies: string[];
                            };
                            MakeMoveVec: {
                                type: string | null;
                                elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            Upgrade: {
                                modules: string[];
                                dependencies: string[];
                                package: string;
                                ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                            };
                        }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
                    };
                    ChangeEpoch: true;
                    Genesis: true;
                    ConsensusCommitPrologue: true;
                }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
                sender: string;
                gasData: {
                    payment: {
                        objectId: string;
                        version: string;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
                expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    None: true;
                    Epoch: number;
                }, "None" | "Epoch">;
            };
            $kind: "V1";
        };
    };
    txSignatures: string[];
}, {
    intentMessage: {
        intent: {
            scope: import("@iota/bcs").EnumInputShape<{
                TransactionData: boolean | object | null;
                TransactionEffects: boolean | object | null;
                CheckpointSummary: boolean | object | null;
                PersonalMessage: boolean | object | null;
            }>;
            version: {
                V0: boolean | object | null;
            };
            appId: {
                Iota: boolean | object | null;
            };
        };
        value: {
            V1: {
                kind: import("@iota/bcs").EnumInputShape<{
                    ProgrammableTransaction: {
                        inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                            Pure: {
                                bytes: string | Uint8Array;
                            };
                            Object: import("@iota/bcs").EnumInputShape<{
                                ImmOrOwnedObject: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                                SharedObject: {
                                    objectId: string | Uint8Array;
                                    initialSharedVersion: string | number | bigint;
                                    mutable: boolean;
                                };
                                Receiving: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                            }>;
                        }>> & {
                            length: number;
                        };
                        commands: Iterable<import("@iota/bcs").EnumInputShape<{
                            MoveCall: {
                                package: string | Uint8Array;
                                module: string;
                                function: string;
                                typeArguments: Iterable<string | TypeTagType> & {
                                    length: number;
                                };
                                arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            TransferObjects: {
                                objects: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                                address: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                            };
                            SplitCoins: {
                                coin: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                                amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            MergeCoins: {
                                destination: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                                sources: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            Publish: {
                                modules: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                                dependencies: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                            };
                            MakeMoveVec: {
                                type: string | null;
                                elements: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            Upgrade: {
                                modules: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                                dependencies: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                                package: string | Uint8Array;
                                ticket: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                            };
                        }>> & {
                            length: number;
                        };
                    };
                    ChangeEpoch: boolean | object | null;
                    Genesis: boolean | object | null;
                    ConsensusCommitPrologue: boolean | object | null;
                }>;
                sender: string | Uint8Array;
                gasData: {
                    payment: Iterable<{
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    }> & {
                        length: number;
                    };
                    owner: string | Uint8Array;
                    price: string | number | bigint;
                    budget: string | number | bigint;
                };
                expiration: import("@iota/bcs").EnumInputShape<{
                    None: boolean | object | null;
                    Epoch: string | number;
                }>;
            };
        };
    };
    txSignatures: Iterable<string | Uint8Array> & {
        length: number;
    };
}>;
export declare const SenderSignedData: BcsType<{
    intentMessage: {
        intent: {
            scope: import("@iota/bcs").EnumOutputShapeWithKeys<{
                TransactionData: true;
                TransactionEffects: true;
                CheckpointSummary: true;
                PersonalMessage: true;
            }, "TransactionData" | "TransactionEffects" | "CheckpointSummary" | "PersonalMessage">;
            version: {
                V0: true;
                $kind: "V0";
            };
            appId: {
                Iota: true;
                $kind: "Iota";
            };
        };
        value: {
            V1: {
                kind: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    ProgrammableTransaction: {
                        inputs: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            Pure: {
                                bytes: string;
                            };
                            Object: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                ImmOrOwnedObject: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                                SharedObject: {
                                    objectId: string;
                                    initialSharedVersion: string;
                                    mutable: boolean;
                                };
                                Receiving: {
                                    objectId: string;
                                    version: string;
                                    digest: string;
                                };
                            }, "ImmOrOwnedObject" | "SharedObject" | "Receiving">;
                        }, "Pure" | "Object">[];
                        commands: import("@iota/bcs").EnumOutputShapeWithKeys<{
                            MoveCall: {
                                package: string;
                                module: string;
                                function: string;
                                typeArguments: string[];
                                arguments: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            TransferObjects: {
                                objects: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                                address: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                            };
                            SplitCoins: {
                                coin: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                amounts: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            MergeCoins: {
                                destination: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                                sources: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            Publish: {
                                modules: string[];
                                dependencies: string[];
                            };
                            MakeMoveVec: {
                                type: string | null;
                                elements: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">[];
                            };
                            Upgrade: {
                                modules: string[];
                                dependencies: string[];
                                package: string;
                                ticket: import("@iota/bcs").EnumOutputShapeWithKeys<{
                                    GasCoin: true;
                                    Input: number;
                                    Result: number;
                                    NestedResult: [number, number];
                                }, "GasCoin" | "Input" | "Result" | "NestedResult">;
                            };
                        }, "MoveCall" | "TransferObjects" | "SplitCoins" | "MergeCoins" | "Publish" | "MakeMoveVec" | "Upgrade">[];
                    };
                    ChangeEpoch: true;
                    Genesis: true;
                    ConsensusCommitPrologue: true;
                }, "ProgrammableTransaction" | "ChangeEpoch" | "Genesis" | "ConsensusCommitPrologue">;
                sender: string;
                gasData: {
                    payment: {
                        objectId: string;
                        version: string;
                        digest: string;
                    }[];
                    owner: string;
                    price: string;
                    budget: string;
                };
                expiration: import("@iota/bcs").EnumOutputShapeWithKeys<{
                    None: true;
                    Epoch: number;
                }, "None" | "Epoch">;
            };
            $kind: "V1";
        };
    };
    txSignatures: string[];
}[], Iterable<{
    intentMessage: {
        intent: {
            scope: import("@iota/bcs").EnumInputShape<{
                TransactionData: boolean | object | null;
                TransactionEffects: boolean | object | null;
                CheckpointSummary: boolean | object | null;
                PersonalMessage: boolean | object | null;
            }>;
            version: {
                V0: boolean | object | null;
            };
            appId: {
                Iota: boolean | object | null;
            };
        };
        value: {
            V1: {
                kind: import("@iota/bcs").EnumInputShape<{
                    ProgrammableTransaction: {
                        inputs: Iterable<import("@iota/bcs").EnumInputShape<{
                            Pure: {
                                bytes: string | Uint8Array;
                            };
                            Object: import("@iota/bcs").EnumInputShape<{
                                ImmOrOwnedObject: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                                SharedObject: {
                                    objectId: string | Uint8Array;
                                    initialSharedVersion: string | number | bigint;
                                    mutable: boolean;
                                };
                                Receiving: {
                                    objectId: string | Uint8Array;
                                    version: string | number | bigint;
                                    digest: string;
                                };
                            }>;
                        }>> & {
                            length: number;
                        };
                        commands: Iterable<import("@iota/bcs").EnumInputShape<{
                            MoveCall: {
                                package: string | Uint8Array;
                                module: string;
                                function: string;
                                typeArguments: Iterable<string | TypeTagType> & {
                                    length: number;
                                };
                                arguments: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            TransferObjects: {
                                objects: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                                address: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                            };
                            SplitCoins: {
                                coin: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                                amounts: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            MergeCoins: {
                                destination: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                                sources: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            Publish: {
                                modules: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                                dependencies: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                            };
                            MakeMoveVec: {
                                type: string | null;
                                elements: Iterable<import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>> & {
                                    length: number;
                                };
                            };
                            Upgrade: {
                                modules: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                                dependencies: Iterable<string | Uint8Array> & {
                                    length: number;
                                };
                                package: string | Uint8Array;
                                ticket: import("@iota/bcs").EnumInputShape<{
                                    GasCoin: boolean | object | null;
                                    Input: number;
                                    Result: number;
                                    NestedResult: readonly [number, number];
                                }>;
                            };
                        }>> & {
                            length: number;
                        };
                    };
                    ChangeEpoch: boolean | object | null;
                    Genesis: boolean | object | null;
                    ConsensusCommitPrologue: boolean | object | null;
                }>;
                sender: string | Uint8Array;
                gasData: {
                    payment: Iterable<{
                        objectId: string | Uint8Array;
                        version: string | number | bigint;
                        digest: string;
                    }> & {
                        length: number;
                    };
                    owner: string | Uint8Array;
                    price: string | number | bigint;
                    budget: string | number | bigint;
                };
                expiration: import("@iota/bcs").EnumInputShape<{
                    None: boolean | object | null;
                    Epoch: string | number;
                }>;
            };
        };
    };
    txSignatures: Iterable<string | Uint8Array> & {
        length: number;
    };
}> & {
    length: number;
}>;
export declare const PasskeyAuthenticator: BcsType<{
    authenticatorData: number[];
    clientDataJson: string;
    userSignature: number[];
}, {
    authenticatorData: Iterable<number> & {
        length: number;
    };
    clientDataJson: string;
    userSignature: Iterable<number> & {
        length: number;
    };
}>;
