import { toB64 } from "@iota/bcs";
import { blake2b } from "@noble/hashes/blake2b";
import { bytesToHex } from "@noble/hashes/utils";
import { bcs } from "../bcs/index.js";
import { normalizeIotaAddress, IOTA_ADDRESS_LENGTH } from "../utils/iota-types.js";
import { messageWithIntent } from "./intent.js";
import { SIGNATURE_SCHEME_TO_FLAG } from "./signature-scheme.js";
function bytesEqual(a, b) {
  if (a === b) return true;
  if (a.length !== b.length) {
    return false;
  }
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
}
class PublicKey {
  /**
   * Checks if two public keys are equal
   */
  equals(publicKey) {
    return bytesEqual(this.toRawBytes(), publicKey.toRawBytes());
  }
  /**
   * Return the base-64 representation of the public key
   */
  toBase64() {
    return toB64(this.toRawBytes());
  }
  toString() {
    throw new Error(
      "`toString` is not implemented on public keys. Use `toBase64()` or `toRawBytes()` instead."
    );
  }
  /**
   * Return the IOTA representation of the public key encoded in
   * base-64. An IOTA public key is formed by the concatenation
   * of the scheme flag with the raw bytes of the public key
   */
  toIotaPublicKey() {
    const bytes = this.toIotaBytes();
    return toB64(bytes);
  }
  verifyWithIntent(bytes, signature, intent) {
    const intentMessage = messageWithIntent(intent, bytes);
    const digest = blake2b(intentMessage, { dkLen: 32 });
    return this.verify(digest, signature);
  }
  /**
   * Verifies that the signature is valid for the provided PersonalMessage
   */
  verifyPersonalMessage(message, signature) {
    return this.verifyWithIntent(
      bcs.vector(bcs.u8()).serialize(message).toBytes(),
      signature,
      "PersonalMessage"
    );
  }
  /**
   * Verifies that the signature is valid for the provided Transaction
   */
  verifyTransaction(transaction, signature) {
    return this.verifyWithIntent(transaction, signature, "TransactionData");
  }
  /**
   * Returns the bytes representation of the public key
   * prefixed with the signature scheme flag
   */
  toIotaBytes() {
    const rawBytes = this.toRawBytes();
    const iotaBytes = new Uint8Array(rawBytes.length + 1);
    iotaBytes.set([this.flag()]);
    iotaBytes.set(rawBytes, 1);
    return iotaBytes;
  }
  /**
   * Returns the bytes representation of the public key
   * prefixed with the signature scheme flag. If the
   * signature scheme is ED25519, no prefix is set.
   */
  toIotaBytesForAddress() {
    const rawBytes = this.toRawBytes();
    if (this.flag() === SIGNATURE_SCHEME_TO_FLAG["ED25519"]) {
      return rawBytes;
    } else {
      const iotaBytes = new Uint8Array(rawBytes.length + 1);
      iotaBytes.set([this.flag()]);
      iotaBytes.set(rawBytes, 1);
      return iotaBytes;
    }
  }
  /**
   * Return the IOTA address associated with this Ed25519 public key
   */
  toIotaAddress() {
    return normalizeIotaAddress(
      bytesToHex(blake2b(this.toIotaBytesForAddress(), { dkLen: 32 })).slice(
        0,
        IOTA_ADDRESS_LENGTH * 2
      )
    );
  }
}
export {
  PublicKey,
  bytesEqual
};
//# sourceMappingURL=publickey.js.map
