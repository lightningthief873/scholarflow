{
  "version": 3,
  "sources": ["../../../src/cryptography/signature.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@iota/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { MultiSigStruct } from '../multisig/publickey.js';\nimport type { PublicKey } from './publickey.js';\nimport type { SignatureScheme } from './signature-scheme.js';\nimport {\n    SIGNATURE_FLAG_TO_SCHEME,\n    SIGNATURE_SCHEME_TO_FLAG,\n    SIGNATURE_SCHEME_TO_SIZE,\n} from './signature-scheme.js';\nimport { parseSerializedPasskeySignature } from '../keypairs/passkey/publickey.js';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SerializeSignatureInput = {\n    signatureScheme: SignatureScheme;\n    /** Base64-encoded signature */\n    signature: Uint8Array;\n    /** Base64-encoded public key */\n    publicKey?: PublicKey;\n};\n\n/**\n * Takes in a signature, its associated signing scheme and a public key, then serializes this data\n */\nexport function toSerializedSignature({\n    signature,\n    signatureScheme,\n    publicKey,\n}: SerializeSignatureInput): string {\n    if (!publicKey) {\n        throw new Error('`publicKey` is required');\n    }\n\n    const pubKeyBytes = publicKey.toRawBytes();\n    const serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n    serializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n    serializedSignature.set(signature, 1);\n    serializedSignature.set(pubKeyBytes, 1 + signature.length);\n    return toB64(serializedSignature);\n}\n\n/**\n * Decodes a serialized signature into its constituent components: the signature scheme, the actual signature, and the public key\n */\nexport function parseSerializedSignature(serializedSignature: string) {\n    const bytes = fromB64(serializedSignature);\n\n    const signatureScheme =\n        SIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n    switch (signatureScheme) {\n        case 'Passkey':\n            return parseSerializedPasskeySignature(serializedSignature);\n        case 'MultiSig':\n            const multisig: MultiSigStruct = bcs.MultiSig.parse(bytes.slice(1));\n            return {\n                serializedSignature,\n                signatureScheme,\n                multisig,\n                bytes,\n            };\n        case 'ED25519':\n        case 'Secp256k1':\n        case 'Secp256r1':\n            const size =\n                SIGNATURE_SCHEME_TO_SIZE[signatureScheme as keyof typeof SIGNATURE_SCHEME_TO_SIZE];\n            const signature = bytes.slice(1, bytes.length - size);\n            const publicKey = bytes.slice(1 + signature.length);\n\n            return {\n                serializedSignature,\n                signatureScheme,\n                signature,\n                publicKey,\n                bytes,\n            };\n\n        default:\n            throw new Error('Unsupported signature scheme');\n    }\n}\n"],
  "mappings": "AAIA,SAAS,SAAS,aAAa;AAE/B,SAAS,WAAW;AAIpB;AAAA,EACI;AAAA,EACA;AAAA,EACA;AAAA,OACG;AACP,SAAS,uCAAuC;AAgBzC,SAAS,sBAAsB;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AACJ,GAAoC;AAChC,MAAI,CAAC,WAAW;AACZ,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC7C;AAEA,QAAM,cAAc,UAAU,WAAW;AACzC,QAAM,sBAAsB,IAAI,WAAW,IAAI,UAAU,SAAS,YAAY,MAAM;AACpF,sBAAoB,IAAI,CAAC,yBAAyB,eAAe,CAAC,CAAC;AACnE,sBAAoB,IAAI,WAAW,CAAC;AACpC,sBAAoB,IAAI,aAAa,IAAI,UAAU,MAAM;AACzD,SAAO,MAAM,mBAAmB;AACpC;AAKO,SAAS,yBAAyB,qBAA6B;AAClE,QAAM,QAAQ,QAAQ,mBAAmB;AAEzC,QAAM,kBACF,yBAAyB,MAAM,CAAC,CAA0C;AAE9E,UAAQ,iBAAiB;AAAA,IACrB,KAAK;AACD,aAAO,gCAAgC,mBAAmB;AAAA,IAC9D,KAAK;AACD,YAAM,WAA2B,IAAI,SAAS,MAAM,MAAM,MAAM,CAAC,CAAC;AAClE,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACD,YAAM,OACF,yBAAyB,eAAwD;AACrF,YAAM,YAAY,MAAM,MAAM,GAAG,MAAM,SAAS,IAAI;AACpD,YAAM,YAAY,MAAM,MAAM,IAAI,UAAU,MAAM;AAElD,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IAEJ;AACI,YAAM,IAAI,MAAM,8BAA8B;AAAA,EACtD;AACJ;",
  "names": []
}
