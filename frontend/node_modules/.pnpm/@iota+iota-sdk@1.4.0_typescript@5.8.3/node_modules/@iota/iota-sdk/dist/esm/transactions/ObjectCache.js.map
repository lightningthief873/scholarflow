{
  "version": 3,
  "sources": ["../../../src/transactions/ObjectCache.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { bcs } from '../bcs/index.js';\nimport { normalizeIotaAddress } from '../utils/iota-types.js';\nimport type { OpenMoveTypeSignature } from './data/internal.js';\nimport type { TransactionPlugin } from './json-rpc-resolver.js';\n\nexport interface ObjectCacheEntry {\n    objectId: string;\n    version: string;\n    digest: string;\n    owner: string | null;\n    initialSharedVersion: string | null;\n}\n\nexport interface MoveFunctionCacheEntry {\n    package: string;\n    module: string;\n    function: string;\n    parameters: OpenMoveTypeSignature[];\n}\n\nexport interface CacheEntryTypes {\n    OwnedObject: ObjectCacheEntry;\n    SharedOrImmutableObject: ObjectCacheEntry;\n    MoveFunction: MoveFunctionCacheEntry;\n    Custom: unknown;\n}\nexport abstract class AsyncCache {\n    protected abstract get<T extends keyof CacheEntryTypes>(\n        type: T,\n        key: string,\n    ): Promise<CacheEntryTypes[T] | null>;\n    protected abstract set<T extends keyof CacheEntryTypes>(\n        type: T,\n        key: string,\n        value: CacheEntryTypes[T],\n    ): Promise<void>;\n    protected abstract delete<T extends keyof CacheEntryTypes>(type: T, key: string): Promise<void>;\n    abstract clear<T extends keyof CacheEntryTypes>(type?: T): Promise<void>;\n\n    async getObject(id: string) {\n        const [owned, shared] = await Promise.all([\n            this.get('OwnedObject', id),\n            this.get('SharedOrImmutableObject', id),\n        ]);\n\n        return owned ?? shared ?? null;\n    }\n\n    async getObjects(ids: string[]) {\n        return Promise.all([...ids.map((id) => this.getObject(id))]);\n    }\n\n    async addObject(object: ObjectCacheEntry) {\n        if (object.owner) {\n            await this.set('OwnedObject', object.objectId, object);\n        } else {\n            await this.set('SharedOrImmutableObject', object.objectId, object);\n        }\n\n        return object;\n    }\n\n    async addObjects(objects: ObjectCacheEntry[]) {\n        await Promise.all(objects.map(async (object) => this.addObject(object)));\n    }\n\n    async deleteObject(id: string) {\n        await Promise.all([\n            this.delete('OwnedObject', id),\n            this.delete('SharedOrImmutableObject', id),\n        ]);\n    }\n\n    async deleteObjects(ids: string[]) {\n        await Promise.all(ids.map((id) => this.deleteObject(id)));\n    }\n\n    async getMoveFunctionDefinition(ref: { package: string; module: string; function: string }) {\n        const functionName = `${normalizeIotaAddress(ref.package)}::${ref.module}::${ref.function}`;\n        return this.get('MoveFunction', functionName);\n    }\n\n    async addMoveFunctionDefinition(functionEntry: MoveFunctionCacheEntry) {\n        const pkg = normalizeIotaAddress(functionEntry.package);\n        const functionName = `${pkg}::${functionEntry.module}::${functionEntry.function}`;\n        const entry = {\n            ...functionEntry,\n            package: pkg,\n        };\n\n        await this.set('MoveFunction', functionName, entry);\n\n        return entry;\n    }\n\n    async deleteMoveFunctionDefinition(ref: { package: string; module: string; function: string }) {\n        const functionName = `${normalizeIotaAddress(ref.package)}::${ref.module}::${ref.function}`;\n        await this.delete('MoveFunction', functionName);\n    }\n\n    async getCustom<T>(key: string) {\n        return this.get('Custom', key) as Promise<T | null>;\n    }\n\n    async setCustom<T>(key: string, value: T) {\n        return this.set('Custom', key, value);\n    }\n\n    async deleteCustom(key: string) {\n        return this.delete('Custom', key);\n    }\n}\n\nexport class InMemoryCache extends AsyncCache {\n    #caches = {\n        OwnedObject: new Map<string, ObjectCacheEntry>(),\n        SharedOrImmutableObject: new Map<string, ObjectCacheEntry>(),\n        MoveFunction: new Map<string, MoveFunctionCacheEntry>(),\n        Custom: new Map<string, unknown>(),\n    };\n\n    protected async get<T extends keyof CacheEntryTypes>(type: T, key: string) {\n        return (this.#caches[type].get(key) as CacheEntryTypes[T]) ?? null;\n    }\n\n    protected async set<T extends keyof CacheEntryTypes>(\n        type: T,\n        key: string,\n        value: CacheEntryTypes[T],\n    ) {\n        (this.#caches[type] as Map<string, typeof value>).set(key, value as never);\n    }\n\n    protected async delete<T extends keyof CacheEntryTypes>(type: T, key: string) {\n        this.#caches[type].delete(key);\n    }\n\n    async clear<T extends keyof CacheEntryTypes>(type?: T) {\n        if (type) {\n            this.#caches[type].clear();\n        } else {\n            for (const cache of Object.values(this.#caches)) {\n                cache.clear();\n            }\n        }\n    }\n}\n\nexport interface ObjectCacheOptions {\n    cache?: AsyncCache;\n}\n\nexport class ObjectCache {\n    #cache: AsyncCache;\n\n    constructor({ cache = new InMemoryCache() }: ObjectCacheOptions) {\n        this.#cache = cache;\n    }\n\n    asPlugin(): TransactionPlugin {\n        return async (transactionData, _options, next) => {\n            const unresolvedObjects = transactionData.inputs\n                .filter((input) => input.UnresolvedObject)\n                .map((input) => input.UnresolvedObject!.objectId);\n\n            const cached = (await this.#cache.getObjects(unresolvedObjects)).filter(\n                (obj) => obj !== null,\n            );\n\n            const byId = new Map(cached.map((obj) => [obj!.objectId, obj]));\n\n            for (const input of transactionData.inputs) {\n                if (!input.UnresolvedObject) {\n                    continue;\n                }\n\n                const cached = byId.get(input.UnresolvedObject.objectId);\n\n                if (!cached) {\n                    continue;\n                }\n\n                if (cached.initialSharedVersion && !input.UnresolvedObject.initialSharedVersion) {\n                    input.UnresolvedObject.initialSharedVersion = cached.initialSharedVersion;\n                } else {\n                    if (cached.version && !input.UnresolvedObject.version) {\n                        input.UnresolvedObject.version = cached.version;\n                    }\n\n                    if (cached.digest && !input.UnresolvedObject.digest) {\n                        input.UnresolvedObject.digest = cached.digest;\n                    }\n                }\n            }\n\n            await Promise.all(\n                transactionData.commands.map(async (commands) => {\n                    if (commands.MoveCall) {\n                        const def = await this.getMoveFunctionDefinition({\n                            package: commands.MoveCall.package,\n                            module: commands.MoveCall.module,\n                            function: commands.MoveCall.function,\n                        });\n\n                        if (def) {\n                            commands.MoveCall._argumentTypes = def.parameters;\n                        }\n                    }\n                }),\n            );\n\n            await next();\n\n            await Promise.all(\n                transactionData.commands.map(async (commands) => {\n                    if (commands.MoveCall?._argumentTypes) {\n                        await this.#cache.addMoveFunctionDefinition({\n                            package: commands.MoveCall.package,\n                            module: commands.MoveCall.module,\n                            function: commands.MoveCall.function,\n                            parameters: commands.MoveCall._argumentTypes,\n                        });\n                    }\n                }),\n            );\n        };\n    }\n\n    async clear() {\n        await this.#cache.clear();\n    }\n\n    async getMoveFunctionDefinition(ref: { package: string; module: string; function: string }) {\n        return this.#cache.getMoveFunctionDefinition(ref);\n    }\n\n    async getObjects(ids: string[]) {\n        return this.#cache.getObjects(ids);\n    }\n\n    async deleteObjects(ids: string[]) {\n        return this.#cache.deleteObjects(ids);\n    }\n\n    async clearOwnedObjects() {\n        await this.#cache.clear('OwnedObject');\n    }\n\n    async clearCustom() {\n        await this.#cache.clear('Custom');\n    }\n\n    async getCustom<T>(key: string) {\n        return this.#cache.getCustom<T>(key);\n    }\n\n    async setCustom<T>(key: string, value: T) {\n        return this.#cache.setCustom(key, value);\n    }\n\n    async deleteCustom(key: string) {\n        return this.#cache.deleteCustom(key);\n    }\n\n    async applyEffects(effects: typeof bcs.TransactionEffects.$inferType) {\n        if (!effects.V1) {\n            throw new Error(`Unsupported transaction effects version ${effects.$kind}`);\n        }\n\n        const { lamportVersion, changedObjects } = effects.V1;\n\n        const deletedIds: string[] = [];\n        const addedObjects: ObjectCacheEntry[] = [];\n\n        changedObjects.map(async ([id, change]) => {\n            if (change.outputState.NotExist) {\n                await this.#cache.deleteObject(id);\n            } else if (change.outputState.ObjectWrite) {\n                const [digest, owner] = change.outputState.ObjectWrite;\n\n                addedObjects.push({\n                    objectId: id,\n                    digest,\n                    version: lamportVersion,\n                    owner: owner.AddressOwner ?? owner.ObjectOwner ?? null,\n                    initialSharedVersion: owner.Shared?.initialSharedVersion ?? null,\n                });\n            }\n        });\n\n        await Promise.all([\n            this.#cache.addObjects(addedObjects),\n            this.#cache.deleteObjects(deletedIds),\n        ]);\n    }\n}\n"],
  "mappings": "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",
  "names": ["cached"]
}
