{
  "version": 3,
  "sources": ["../../../../src/transactions/data/v2.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumInputShape } from '@iota/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n    array,\n    boolean,\n    integer,\n    literal,\n    nullable,\n    nullish,\n    number,\n    object,\n    optional,\n    pipe,\n    record,\n    string,\n    tuple,\n    union,\n    unknown,\n} from 'valibot';\n\nimport { BCSBytes, JsonU64, ObjectID, ObjectRef, IotaAddress } from './internal.js';\n\ntype Merge<T> = T extends object ? { [K in keyof T]: T[K] } : never;\n\nfunction enumUnion<T extends Record<string, GenericSchema<any>>>(options: T) {\n    return union(\n        Object.entries(options).map(([key, value]) => object({ [key]: value })),\n    ) as GenericSchema<\n        EnumInputShape<\n            Merge<{\n                [K in keyof T]: InferInput<T[K]>;\n            }>\n        >\n    >;\n}\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L690-L702\nconst Argument = enumUnion({\n    GasCoin: literal(true),\n    Input: pipe(number(), integer()),\n    Result: pipe(number(), integer()),\n    NestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]),\n});\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L1387-L1392\nconst GasData = object({\n    budget: nullable(JsonU64),\n    price: nullable(JsonU64),\n    owner: nullable(IotaAddress),\n    payment: nullable(array(ObjectRef)),\n});\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L707-L718\nconst ProgrammableMoveCall = object({\n    package: ObjectID,\n    module: string(),\n    function: string(),\n    // snake case in rust\n    typeArguments: array(string()),\n    arguments: array(Argument),\n});\n\nconst $Intent = object({\n    name: string(),\n    inputs: record(string(), union([Argument, array(Argument)])),\n    data: record(string(), unknown()),\n});\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L657-L685\nconst Command = enumUnion({\n    MoveCall: ProgrammableMoveCall,\n    TransferObjects: object({\n        objects: array(Argument),\n        address: Argument,\n    }),\n    SplitCoins: object({\n        coin: Argument,\n        amounts: array(Argument),\n    }),\n    MergeCoins: object({\n        destination: Argument,\n        sources: array(Argument),\n    }),\n    Publish: object({\n        modules: array(BCSBytes),\n        dependencies: array(ObjectID),\n    }),\n    MakeMoveVec: object({\n        type: nullable(string()),\n        elements: array(Argument),\n    }),\n    Upgrade: object({\n        modules: array(BCSBytes),\n        dependencies: array(ObjectID),\n        package: ObjectID,\n        ticket: Argument,\n    }),\n    $Intent,\n});\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L102-L114\nconst ObjectArg = enumUnion({\n    ImmOrOwnedObject: ObjectRef,\n    SharedObject: object({\n        objectId: ObjectID,\n        // snake case in rust\n        initialSharedVersion: JsonU64,\n        mutable: boolean(),\n    }),\n    Receiving: ObjectRef,\n});\n\n// https://github.com/iotaledger/iota/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/iota-types/src/transaction.rs#L75-L80\nconst CallArg = enumUnion({\n    Object: ObjectArg,\n    Pure: object({\n        bytes: BCSBytes,\n    }),\n    UnresolvedPure: object({\n        value: unknown(),\n    }),\n    UnresolvedObject: object({\n        objectId: ObjectID,\n        version: optional(nullable(JsonU64)),\n        digest: optional(nullable(string())),\n        initialSharedVersion: optional(nullable(JsonU64)),\n    }),\n});\n\nconst TransactionExpiration = enumUnion({\n    None: literal(true),\n    Epoch: JsonU64,\n});\n\nexport const SerializedTransactionDataV2 = object({\n    version: literal(2),\n    sender: nullish(IotaAddress),\n    expiration: nullish(TransactionExpiration),\n    gasData: GasData,\n    inputs: array(CallArg),\n    commands: array(Command),\n});\n\nexport type SerializedTransactionDataV2 = InferOutput<typeof SerializedTransactionDataV2>;\n"],
  "mappings": "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",
  "names": []
}
