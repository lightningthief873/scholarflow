{
  "version": 3,
  "sources": ["../../../src/graphql/client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport type { TadaDocumentNode } from 'gql.tada';\nimport type { DocumentNode } from 'graphql';\nimport { print } from 'graphql';\n\nexport type GraphQLDocument<\n    Result = Record<string, unknown>,\n    Variables = Record<string, unknown>,\n> =\n    | string\n    | DocumentNode\n    | TypedDocumentNode<Result, Variables>\n    | TadaDocumentNode<Result, Variables>;\n\nexport type GraphQLQueryOptions<\n    Result = Record<string, unknown>,\n    Variables = Record<string, unknown>,\n> = {\n    query: GraphQLDocument<Result, Variables>;\n    operationName?: string;\n    extensions?: Record<string, unknown>;\n} & (Variables extends { [key: string]: never }\n    ? { variables?: Variables }\n    : {\n          variables: Variables;\n      });\n\nexport type GraphQLQueryResult<Result = Record<string, unknown>> = {\n    data?: Result;\n    errors?: GraphQLResponseErrors;\n    extensions?: Record<string, unknown>;\n};\n\nexport type GraphQLResponseErrors = Array<{\n    message: string;\n    locations?: { line: number; column: number }[];\n    path?: (string | number)[];\n}>;\n\nexport interface IotaGraphQLClientOptions<Queries extends Record<string, GraphQLDocument>> {\n    url: string;\n    fetch?: typeof fetch;\n    headers?: Record<string, string>;\n    queries?: Queries;\n}\n\nexport class IotaGraphQLRequestError extends Error {}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class IotaGraphQLClient<Queries extends Record<string, GraphQLDocument> = {}> {\n    #url: string;\n    #queries: Queries;\n    #headers: Record<string, string>;\n    #fetch: typeof fetch;\n\n    constructor({\n        url,\n        fetch: fetchFn = fetch,\n        headers = {},\n        queries = {} as Queries,\n    }: IotaGraphQLClientOptions<Queries>) {\n        this.#url = url;\n        this.#queries = queries;\n        this.#headers = headers;\n        this.#fetch = (...args) => fetchFn(...args);\n    }\n\n    async query<Result = Record<string, unknown>, Variables = Record<string, unknown>>(\n        options: GraphQLQueryOptions<Result, Variables>,\n    ): Promise<GraphQLQueryResult<Result>> {\n        const res = await this.#fetch(this.#url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ...this.#headers,\n            },\n            body: JSON.stringify({\n                query:\n                    typeof options.query === 'string'\n                        ? String(options.query)\n                        : print(options.query),\n                variables: options.variables,\n                extensions: options.extensions,\n                operationName: options.operationName,\n            }),\n        });\n\n        if (!res.ok) {\n            throw new IotaGraphQLRequestError(\n                `GraphQL request failed: ${res.statusText} (${res.status})`,\n            );\n        }\n\n        return await res.json();\n    }\n\n    async execute<\n        const Query extends Extract<keyof Queries, string>,\n        Result = Queries[Query] extends GraphQLDocument<infer R, unknown>\n            ? R\n            : Record<string, unknown>,\n        Variables = Queries[Query] extends GraphQLDocument<unknown, infer V>\n            ? V\n            : Record<string, unknown>,\n    >(\n        query: Query,\n        options: Omit<GraphQLQueryOptions<Result, Variables>, 'query'>,\n    ): Promise<GraphQLQueryResult<Result>> {\n        return this.query({\n            ...(options as { variables: Record<string, unknown> }),\n            query: this.#queries[query]!,\n        }) as Promise<GraphQLQueryResult<Result>>;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,qBAAsB;AAPtB;AAkDO,MAAM,gCAAgC,MAAM;AAAC;AAG7C,MAAM,kBAAwE;AAAA,EAMjF,YAAY;AAAA,IACR;AAAA,IACA,OAAO,UAAU;AAAA,IACjB,UAAU,CAAC;AAAA,IACX,UAAU,CAAC;AAAA,EACf,GAAsC;AAVtC;AACA;AACA;AACA;AAQI,uBAAK,MAAO;AACZ,uBAAK,UAAW;AAChB,uBAAK,UAAW;AAChB,uBAAK,QAAS,IAAI,SAAS,QAAQ,GAAG,IAAI;AAAA,EAC9C;AAAA,EAEA,MAAM,MACF,SACmC;AACnC,UAAM,MAAM,MAAM,mBAAK,QAAL,WAAY,mBAAK,OAAM;AAAA,MACrC,QAAQ;AAAA,MACR,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,GAAG,mBAAK;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACjB,OACI,OAAO,QAAQ,UAAU,WACnB,OAAO,QAAQ,KAAK,QACpB,sBAAM,QAAQ,KAAK;AAAA,QAC7B,WAAW,QAAQ;AAAA,QACnB,YAAY,QAAQ;AAAA,QACpB,eAAe,QAAQ;AAAA,MAC3B,CAAC;AAAA,IACL;AAEA,QAAI,CAAC,IAAI,IAAI;AACT,YAAM,IAAI;AAAA,QACN,2BAA2B,IAAI,UAAU,KAAK,IAAI,MAAM;AAAA,MAC5D;AAAA,IACJ;AAEA,WAAO,MAAM,IAAI,KAAK;AAAA,EAC1B;AAAA,EAEA,MAAM,QASF,OACA,SACmC;AACnC,WAAO,KAAK,MAAM;AAAA,MACd,GAAI;AAAA,MACJ,OAAO,mBAAK,UAAS,KAAK;AAAA,IAC9B,CAAC;AAAA,EACL;AACJ;AA/DI;AACA;AACA;AACA;",
  "names": []
}
