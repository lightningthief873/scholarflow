{
  "version": 3,
  "sources": ["../../../src/bcs/bcs.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType, BcsTypeOptions } from '@iota/bcs';\nimport { bcs, fromB58, fromB64, fromHEX, toB58, toB64, toHEX } from '@iota/bcs';\n\nimport {\n    isValidIotaAddress,\n    normalizeIotaAddress,\n    IOTA_ADDRESS_LENGTH,\n} from '../utils/iota-types.js';\nimport { TypeTagSerializer } from './type-tag-serializer.js';\nimport type { TypeTag as TypeTagType } from './types.js';\n\nfunction unsafe_u64(options?: BcsTypeOptions<number>) {\n    return bcs\n        .u64({\n            name: 'unsafe_u64',\n            ...(options as object),\n        })\n        .transform({\n            input: (val: number | string) => val,\n            output: (val) => Number(val),\n        });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction optionEnum<T extends BcsType<any, any>>(type: T) {\n    return bcs.enum('Option', {\n        None: null,\n        Some: type,\n    });\n}\n\nexport const Address = bcs.bytes(IOTA_ADDRESS_LENGTH).transform({\n    validate: (val) => {\n        const address = typeof val === 'string' ? val : toHEX(val);\n        if (!address || !isValidIotaAddress(normalizeIotaAddress(address))) {\n            throw new Error(`Invalid IOTA address ${address}`);\n        }\n    },\n    input: (val: string | Uint8Array) =>\n        typeof val === 'string' ? fromHEX(normalizeIotaAddress(val)) : val,\n    output: (val) => normalizeIotaAddress(toHEX(val)),\n});\n\nexport const ObjectDigest = bcs.vector(bcs.u8()).transform({\n    name: 'ObjectDigest',\n    input: (value: string) => fromB58(value),\n    output: (value) => toB58(new Uint8Array(value)),\n    validate: (value) => {\n        if (fromB58(value).length !== 32) {\n            throw new Error('ObjectDigest must be 32 bytes');\n        }\n    },\n});\n\nexport const IotaObjectRef = bcs.struct('IotaObjectRef', {\n    objectId: Address,\n    version: bcs.u64(),\n    digest: ObjectDigest,\n});\n\nexport const SharedObjectRef = bcs.struct('SharedObjectRef', {\n    objectId: Address,\n    initialSharedVersion: bcs.u64(),\n    mutable: bcs.bool(),\n});\n\nexport const ObjectArg = bcs.enum('ObjectArg', {\n    ImmOrOwnedObject: IotaObjectRef,\n    SharedObject: SharedObjectRef,\n    Receiving: IotaObjectRef,\n});\n\nexport const Owner = bcs.enum('Owner', {\n    AddressOwner: Address,\n    ObjectOwner: Address,\n    Shared: bcs.struct('Shared', {\n        initialSharedVersion: bcs.u64(),\n    }),\n    Immutable: null,\n});\n\nexport const CallArg = bcs.enum('CallArg', {\n    Pure: bcs.struct('Pure', {\n        bytes: bcs.vector(bcs.u8()).transform({\n            input: (val: string | Uint8Array) => (typeof val === 'string' ? fromB64(val) : val),\n            output: (val) => toB64(new Uint8Array(val)),\n        }),\n    }),\n    Object: ObjectArg,\n});\n\nconst InnerTypeTag: BcsType<TypeTagType, TypeTagType> = bcs.enum('TypeTag', {\n    bool: null,\n    u8: null,\n    u64: null,\n    u128: null,\n    address: null,\n    signer: null,\n    vector: bcs.lazy(() => InnerTypeTag),\n    struct: bcs.lazy(() => StructTag),\n    u16: null,\n    u32: null,\n    u256: null,\n}) as BcsType<TypeTagType>;\n\nexport const TypeTag = InnerTypeTag.transform({\n    input: (typeTag: string | TypeTagType) =>\n        typeof typeTag === 'string' ? TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,\n    output: (typeTag: TypeTagType) => TypeTagSerializer.tagToString(typeTag),\n});\n\nexport const Argument = bcs.enum('Argument', {\n    GasCoin: null,\n    Input: bcs.u16(),\n    Result: bcs.u16(),\n    NestedResult: bcs.tuple([bcs.u16(), bcs.u16()]),\n});\n\nexport const ProgrammableMoveCall = bcs.struct('ProgrammableMoveCall', {\n    package: Address,\n    module: bcs.string(),\n    function: bcs.string(),\n    typeArguments: bcs.vector(TypeTag),\n    arguments: bcs.vector(Argument),\n});\n\nexport const Command = bcs.enum('Command', {\n    /**\n     * A Move Call - any public Move function can be called via\n     * this transaction. The results can be used that instant to pass\n     * into the next transaction.\n     */\n    MoveCall: ProgrammableMoveCall,\n    /**\n     * Transfer vector of objects to a receiver.\n     */\n    TransferObjects: bcs.struct('TransferObjects', {\n        objects: bcs.vector(Argument),\n        address: Argument,\n    }),\n    // /**\n    //  * Split `amount` from a `coin`.\n    //  */\n    SplitCoins: bcs.struct('SplitCoins', {\n        coin: Argument,\n        amounts: bcs.vector(Argument),\n    }),\n    // /**\n    //  * Merge Vector of Coins (`sources`) into a `destination`.\n    //  */\n    MergeCoins: bcs.struct('MergeCoins', {\n        destination: Argument,\n        sources: bcs.vector(Argument),\n    }),\n    // /**\n    //  * Publish a Move module.\n    //  */\n    Publish: bcs.struct('Publish', {\n        modules: bcs.vector(\n            bcs.vector(bcs.u8()).transform({\n                input: (val: string | Uint8Array) => (typeof val === 'string' ? fromB64(val) : val),\n                output: (val) => toB64(new Uint8Array(val)),\n            }),\n        ),\n        dependencies: bcs.vector(Address),\n    }),\n    // /**\n    //  * Build a vector of objects using the input arguments.\n    //  * It is impossible to export construct a `vector<T: key>` otherwise,\n    //  * so this call serves a utility function.\n    //  */\n    MakeMoveVec: bcs.struct('MakeMoveVec', {\n        type: optionEnum(TypeTag).transform({\n            input: (val: string | null) =>\n                val === null\n                    ? {\n                          None: true,\n                      }\n                    : {\n                          Some: val,\n                      },\n            output: (val) => val.Some ?? null,\n        }),\n        elements: bcs.vector(Argument),\n    }),\n    Upgrade: bcs.struct('Upgrade', {\n        modules: bcs.vector(\n            bcs.vector(bcs.u8()).transform({\n                input: (val: string | Uint8Array) => (typeof val === 'string' ? fromB64(val) : val),\n                output: (val) => toB64(new Uint8Array(val)),\n            }),\n        ),\n        dependencies: bcs.vector(Address),\n        package: Address,\n        ticket: Argument,\n    }),\n});\n\nexport const ProgrammableTransaction = bcs.struct('ProgrammableTransaction', {\n    inputs: bcs.vector(CallArg),\n    commands: bcs.vector(Command),\n});\n\nexport const TransactionKind = bcs.enum('TransactionKind', {\n    ProgrammableTransaction: ProgrammableTransaction,\n    ChangeEpoch: null,\n    Genesis: null,\n    ConsensusCommitPrologue: null,\n});\n\nexport const TransactionExpiration = bcs.enum('TransactionExpiration', {\n    None: null,\n    Epoch: unsafe_u64(),\n});\n\nexport const StructTag = bcs.struct('StructTag', {\n    address: Address,\n    module: bcs.string(),\n    name: bcs.string(),\n    typeParams: bcs.vector(InnerTypeTag),\n});\n\nexport const GasData = bcs.struct('GasData', {\n    payment: bcs.vector(IotaObjectRef),\n    owner: Address,\n    price: bcs.u64(),\n    budget: bcs.u64(),\n});\n\nexport const TransactionDataV1 = bcs.struct('TransactionDataV1', {\n    kind: TransactionKind,\n    sender: Address,\n    gasData: GasData,\n    expiration: TransactionExpiration,\n});\n\nexport const TransactionData = bcs.enum('TransactionData', {\n    V1: TransactionDataV1,\n});\n\nexport const IntentScope = bcs.enum('IntentScope', {\n    TransactionData: null,\n    TransactionEffects: null,\n    CheckpointSummary: null,\n    PersonalMessage: null,\n});\n\nexport const IntentVersion = bcs.enum('IntentVersion', {\n    V0: null,\n});\n\nexport const AppId = bcs.enum('AppId', {\n    Iota: null,\n});\n\nexport const Intent = bcs.struct('Intent', {\n    scope: IntentScope,\n    version: IntentVersion,\n    appId: AppId,\n});\n\nexport function IntentMessage<T extends BcsType<any>>(T: T) {\n    return bcs.struct(`IntentMessage<${T.name}>`, {\n        intent: Intent,\n        value: T,\n    });\n}\n\nexport const CompressedSignature = bcs.enum('CompressedSignature', {\n    ED25519: bcs.fixedArray(64, bcs.u8()),\n    Secp256k1: bcs.fixedArray(64, bcs.u8()),\n    Secp256r1: bcs.fixedArray(64, bcs.u8()),\n});\n\nexport const PublicKey = bcs.enum('PublicKey', {\n    ED25519: bcs.fixedArray(32, bcs.u8()),\n    Secp256k1: bcs.fixedArray(33, bcs.u8()),\n    Secp256r1: bcs.fixedArray(33, bcs.u8()),\n});\n\nexport const MultiSigPkMap = bcs.struct('MultiSigPkMap', {\n    pubKey: PublicKey,\n    weight: bcs.u8(),\n});\n\nexport const MultiSigPublicKey = bcs.struct('MultiSigPublicKey', {\n    pk_map: bcs.vector(MultiSigPkMap),\n    threshold: bcs.u16(),\n});\n\nexport const MultiSig = bcs.struct('MultiSig', {\n    sigs: bcs.vector(CompressedSignature),\n    bitmap: bcs.u16(),\n    multisig_pk: MultiSigPublicKey,\n});\n\nexport const base64String = bcs.vector(bcs.u8()).transform({\n    input: (val: string | Uint8Array) => (typeof val === 'string' ? fromB64(val) : val),\n    output: (val) => toB64(new Uint8Array(val)),\n});\n\nexport const SenderSignedTransaction = bcs.struct('SenderSignedTransaction', {\n    intentMessage: IntentMessage(TransactionData),\n    txSignatures: bcs.vector(base64String),\n});\n\nexport const SenderSignedData = bcs.vector(SenderSignedTransaction, {\n    name: 'SenderSignedData',\n});\n\nexport const PasskeyAuthenticator = bcs.struct('PasskeyAuthenticator', {\n    authenticatorData: bcs.vector(bcs.u8()),\n    clientDataJson: bcs.string(),\n    userSignature: bcs.vector(bcs.u8()),\n});\n"],
  "mappings": "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",
  "names": []
}
