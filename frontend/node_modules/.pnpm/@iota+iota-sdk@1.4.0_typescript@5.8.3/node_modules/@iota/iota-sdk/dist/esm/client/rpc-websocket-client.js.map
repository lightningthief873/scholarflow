{
  "version": 3,
  "sources": ["../../../src/client/rpc-websocket-client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// Modifications Copyright (c) 2024 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nimport { JsonRpcError } from './errors.js';\n\nfunction getWebsocketUrl(httpUrl: string): string {\n    const url = new URL(httpUrl);\n    url.protocol = url.protocol.replace('http', 'ws');\n    return url.toString();\n}\n\ntype JsonRpcMessage =\n    | {\n          id: number;\n          result: never;\n          error: {\n              code: number;\n              message: string;\n          };\n      }\n    | {\n          id: number;\n          result: unknown;\n          error: never;\n      }\n    | {\n          method: string;\n          params: NotificationMessageParams;\n      };\n\ntype NotificationMessageParams = {\n    subscription?: number;\n    result: object;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype SubscriptionRequest<T = any> = {\n    method: string;\n    unsubscribe: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params: any[];\n    onMessage: (event: T) => void;\n};\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n    /**\n     * Custom WebSocket class to use. Defaults to the global WebSocket class, if available.\n     */\n    WebSocketConstructor?: typeof WebSocket;\n    /**\n     * Milliseconds before timing out while calling an RPC method\n     */\n    callTimeout?: number;\n    /**\n     * Milliseconds between attempts to connect\n     */\n    reconnectTimeout?: number;\n    /**\n     * Maximum number of times to try connecting before giving up\n     */\n    maxReconnects?: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS = {\n    // We fudge the typing because we also check for undefined in the constructor:\n    WebSocketConstructor: (typeof WebSocket !== 'undefined'\n        ? WebSocket\n        : undefined) as typeof WebSocket,\n    callTimeout: 30000,\n    reconnectTimeout: 3000,\n    maxReconnects: 5,\n} satisfies WebsocketClientOptions;\n\nexport class WebsocketClient {\n    endpoint: string;\n    options: Required<WebsocketClientOptions>;\n    #requestId = 0;\n    #disconnects = 0;\n    #webSocket: WebSocket | null = null;\n    #connectionPromise: Promise<WebSocket> | null = null;\n    #subscriptions = new Set<RpcSubscription>();\n    #pendingRequests = new Map<\n        number,\n        {\n            resolve: (result: Extract<JsonRpcMessage, { id: number }>) => void;\n            reject: (reason: unknown) => void;\n            timeout: ReturnType<typeof setTimeout>;\n        }\n    >();\n\n    constructor(endpoint: string, options: WebsocketClientOptions = {}) {\n        this.endpoint = endpoint;\n        this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n\n        if (!this.options.WebSocketConstructor) {\n            throw new Error('Missing WebSocket constructor');\n        }\n\n        if (this.endpoint.startsWith('http')) {\n            this.endpoint = getWebsocketUrl(this.endpoint);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async makeRequest<T>(method: string, params: any[]): Promise<T> {\n        const webSocket = await this.#setupWebSocket();\n\n        return new Promise<Extract<JsonRpcMessage, { id: number }>>((resolve, reject) => {\n            this.#requestId += 1;\n            this.#pendingRequests.set(this.#requestId, {\n                resolve: resolve,\n                reject,\n                timeout: setTimeout(() => {\n                    this.#pendingRequests.delete(this.#requestId);\n                    reject(new Error(`Request timeout: ${method}`));\n                }, this.options.callTimeout),\n            });\n\n            webSocket.send(JSON.stringify({ jsonrpc: '2.0', id: this.#requestId, method, params }));\n        }).then(({ error, result }) => {\n            if (error) {\n                throw new JsonRpcError(error.message, error.code);\n            }\n\n            return result as T;\n        });\n    }\n\n    #setupWebSocket() {\n        if (this.#connectionPromise) {\n            return this.#connectionPromise;\n        }\n\n        this.#connectionPromise = new Promise<WebSocket>((resolve) => {\n            this.#webSocket?.close();\n            this.#webSocket = new this.options.WebSocketConstructor(this.endpoint);\n\n            this.#webSocket.addEventListener('open', () => {\n                this.#disconnects = 0;\n                resolve(this.#webSocket!);\n            });\n\n            this.#webSocket.addEventListener('close', () => {\n                this.#disconnects++;\n                if (this.#disconnects <= this.options.maxReconnects) {\n                    setTimeout(() => {\n                        this.#reconnect();\n                    }, this.options.reconnectTimeout);\n                }\n            });\n\n            this.#webSocket.addEventListener('message', ({ data }: { data: string }) => {\n                let json: JsonRpcMessage;\n                try {\n                    json = JSON.parse(data) as JsonRpcMessage;\n                } catch (error) {\n                    console.error(\n                        new Error(`Failed to parse RPC message: ${data}`, { cause: error }),\n                    );\n                    return;\n                }\n\n                if ('id' in json && json.id != null && this.#pendingRequests.has(json.id)) {\n                    const { resolve, timeout } = this.#pendingRequests.get(json.id)!;\n\n                    clearTimeout(timeout);\n                    resolve(json);\n                } else if ('params' in json) {\n                    const { params } = json;\n                    this.#subscriptions.forEach((subscription) => {\n                        if (subscription.subscriptionId === params.subscription)\n                            if (params.subscription === subscription.subscriptionId) {\n                                subscription.onMessage(params.result);\n                            }\n                    });\n                }\n            });\n        });\n\n        return this.#connectionPromise;\n    }\n\n    async #reconnect() {\n        this.#webSocket?.close();\n        this.#connectionPromise = null;\n\n        return Promise.allSettled(\n            [...this.#subscriptions].map((subscription) => subscription.subscribe(this)),\n        );\n    }\n\n    async subscribe<T>(input: SubscriptionRequest<T>) {\n        const subscription = new RpcSubscription(input);\n        this.#subscriptions.add(subscription);\n        await subscription.subscribe(this);\n        return () => subscription.unsubscribe(this);\n    }\n}\n\nclass RpcSubscription {\n    subscriptionId: number | null = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input: SubscriptionRequest<any>;\n    subscribed = false;\n\n    constructor(input: SubscriptionRequest) {\n        this.input = input;\n    }\n\n    onMessage(message: unknown) {\n        if (this.subscribed) {\n            this.input.onMessage(message);\n        }\n    }\n\n    async unsubscribe(client: WebsocketClient) {\n        const { subscriptionId } = this;\n        this.subscribed = false;\n        if (subscriptionId == null) return false;\n        this.subscriptionId = null;\n\n        return client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n    }\n\n    async subscribe(client: WebsocketClient) {\n        this.subscriptionId = null;\n        this.subscribed = true;\n        const newSubscriptionId = await client.makeRequest<number>(\n            this.input.method,\n            this.input.params,\n        );\n\n        if (this.subscribed) {\n            this.subscriptionId = newSubscriptionId;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["resolve"]
}
